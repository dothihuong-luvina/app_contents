<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WiperDog</web>
  <name>MonitoringData</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WiperDog.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1382327524000</creationDate>
  <date>1385721204000</date>
  <contentUpdateDate>1385721204000</contentUpdateDate>
  <version>1.1</version>
  <title>MonitoringData</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e9f88f34-085f-45e6-9f35-9b4f4a552b37</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
/*
 * jQuery timepicker addon
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 1.3.1
 * Last Modified: 07/07/2013
 *
 * Copyright 2013 Trent Richardson
 * You may use this project under MIT or GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 */

/*jslint evil: true, white: false, undef: false, nomen: false */

(function($) {

	/*
	* Lets not redefine timepicker, Prevent "Uncaught RangeError: Maximum call stack size exceeded"
	*/
	$.ui.timepicker = $.ui.timepicker || {};
	if ($.ui.timepicker.version) {
		return;
	}

	/*
	* Extend jQueryUI, get it started with our version number
	*/
	$.extend($.ui, {
		timepicker: {
			version: "1.3.1"
		}
	});

	/* 
	* Timepicker manager.
	* Use the singleton instance of this class, $.timepicker, to interact with the time picker.
	* Settings for (groups of) time pickers are maintained in an instance object,
	* allowing multiple different settings on the same page.
	*/
	var Timepicker = function() {
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[''] = { // Default regional settings
			currentText: 'Now',
			closeText: 'Done',
			amNames: ['AM', 'A'],
			pmNames: ['PM', 'P'],
			timeFormat: 'HH:mm',
			timeSuffix: '',
			timeOnlyTitle: 'Choose Time',
			timeText: 'Time',
			hourText: 'Hour',
			minuteText: 'Minute',
			secondText: 'Second',
			millisecText: 'Millisecond',
			microsecText: 'Microsecond',
			timezoneText: 'Time Zone',
			isRTL: false
		};
		this._defaults = { // Global defaults for all the datetime picker instances
			showButtonPanel: true,
			timeOnly: false,
			showHour: null,
			showMinute: null,
			showSecond: null,
			showMillisec: null,
			showMicrosec: null,
			showTimezone: null,
			showTime: true,
			stepHour: 1,
			stepMinute: 1,
			stepSecond: 1,
			stepMillisec: 1,
			stepMicrosec: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			microsec: 0,
			timezone: null,
			hourMin: 0,
			minuteMin: 0,
			secondMin: 0,
			millisecMin: 0,
			microsecMin: 0,
			hourMax: 23,
			minuteMax: 59,
			secondMax: 59,
			millisecMax: 999,
			microsecMax: 999,
			minDateTime: null,
			maxDateTime: null,
			onSelect: null,
			hourGrid: 0,
			minuteGrid: 0,
			secondGrid: 0,
			millisecGrid: 0,
			microsecGrid: 0,
			alwaysSetTime: true,
			separator: ' ',
			altFieldTimeOnly: true,
			altTimeFormat: null,
			altSeparator: null,
			altTimeSuffix: null,
			pickerTimeFormat: null,
			pickerTimeSuffix: null,
			showTimepicker: true,
			timezoneList: null,
			addSliderAccess: false,
			sliderAccessArgs: null,
			controlType: 'slider',
			defaultValue: null,
			parse: 'strict'
		};
		$.extend(this._defaults, this.regional['']);
	};

	$.extend(Timepicker.prototype, {
		$input: null,
		$altInput: null,
		$timeObj: null,
		inst: null,
		hour_slider: null,
		minute_slider: null,
		second_slider: null,
		millisec_slider: null,
		microsec_slider: null,
		timezone_select: null,
		hour: 0,
		minute: 0,
		second: 0,
		millisec: 0,
		microsec: 0,
		timezone: null,
		hourMinOriginal: null,
		minuteMinOriginal: null,
		secondMinOriginal: null,
		millisecMinOriginal: null,
		microsecMinOriginal: null,
		hourMaxOriginal: null,
		minuteMaxOriginal: null,
		secondMaxOriginal: null,
		millisecMaxOriginal: null,
		microsecMaxOriginal: null,
		ampm: '',
		formattedDate: '',
		formattedTime: '',
		formattedDateTime: '',
		timezoneList: null,
		units: ['hour','minute','second','millisec', 'microsec'],
		support: {},
		control: null,

		/* 
		* Override the default settings for all instances of the time picker.
		* @param  settings  object - the new settings to use as defaults (anonymous object)
		* @return the manager object
		*/
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/*
		* Create a new Timepicker instance
		*/
		_newInst: function($input, opts) {
			var tp_inst = new Timepicker(),
				inlineSettings = {},
            	fns = {},
		    	overrides, i;

			for (var attrName in this._defaults) {
				if(this._defaults.hasOwnProperty(attrName)){
					var attrValue = $input.attr('time:' + attrName);
					if (attrValue) {
						try {
							inlineSettings[attrName] = eval(attrValue);
						} catch (err) {
							inlineSettings[attrName] = attrValue;
						}
					}
				}
			}

		    overrides = {
		        beforeShow: function (input, dp_inst) {
		            if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {
		                return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);
		            }
		        },
		        onChangeMonthYear: function (year, month, dp_inst) {
		            // Update the time as well : this prevents the time from disappearing from the $input field.
		            tp_inst._updateDateTime(dp_inst);
		            if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {
		                tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);
		            }
		        },
		        onClose: function (dateText, dp_inst) {
		            if (tp_inst.timeDefined === true &amp;&amp; $input.val() !== '') {
		                tp_inst._updateDateTime(dp_inst);
		            }
		            if ($.isFunction(tp_inst._defaults.evnts.onClose)) {
		                tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);
		            }
		        }
		    };
		    for (i in overrides) {
		        if (overrides.hasOwnProperty(i)) {
		            fns[i] = opts[i] || null;
		        }
		    }

		    tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {
		        evnts:fns,
		        timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');
		    });
			tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {
				return val.toUpperCase();
			});
			tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {
				return val.toUpperCase();
			});

			// detect which units are supported
			tp_inst.support = detectSupport(
					tp_inst._defaults.timeFormat + 
					(tp_inst._defaults.pickerTimeFormat? tp_inst._defaults.pickerTimeFormat:'') + 
					(tp_inst._defaults.altTimeFormat? tp_inst._defaults.altTimeFormat:''));

			// controlType is string - key to our this._controls
			if(typeof(tp_inst._defaults.controlType) === 'string'){
				if(tp_inst._defaults.controlType == 'slider' &amp;&amp; typeof(jQuery.ui.slider) === 'undefined'){
					tp_inst._defaults.controlType = 'select';
				}
				tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];
			}
			// controlType is an object and must implement create, options, value methods
			else{ 
				tp_inst.control = tp_inst._defaults.controlType;
			}

			// prep the timezone options
			var timezoneList = [-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,
					0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];
			if (tp_inst._defaults.timezoneList !== null) {
				timezoneList = tp_inst._defaults.timezoneList;
			}
			var tzl=timezoneList.length,tzi=0,tzv=null;
			if (tzl &gt; 0 &amp;&amp; typeof timezoneList[0] !== 'object') {
				for(; tzi&lt;tzl; tzi++){
					tzv = timezoneList[tzi];
					timezoneList[tzi] = { value: tzv, label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601) };
				}
			}
			tp_inst._defaults.timezoneList = timezoneList;

			// set the default units
			tp_inst.timezone = tp_inst._defaults.timezone !== null? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) : 
							((new Date()).getTimezoneOffset()*-1);
			tp_inst.hour = tp_inst._defaults.hour &lt; tp_inst._defaults.hourMin? tp_inst._defaults.hourMin : 
							tp_inst._defaults.hour &gt; tp_inst._defaults.hourMax? tp_inst._defaults.hourMax : tp_inst._defaults.hour;
			tp_inst.minute = tp_inst._defaults.minute &lt; tp_inst._defaults.minuteMin? tp_inst._defaults.minuteMin : 
							tp_inst._defaults.minute &gt; tp_inst._defaults.minuteMax? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;
			tp_inst.second = tp_inst._defaults.second &lt; tp_inst._defaults.secondMin? tp_inst._defaults.secondMin : 
							tp_inst._defaults.second &gt; tp_inst._defaults.secondMax? tp_inst._defaults.secondMax : tp_inst._defaults.second;
			tp_inst.millisec = tp_inst._defaults.millisec &lt; tp_inst._defaults.millisecMin? tp_inst._defaults.millisecMin : 
							tp_inst._defaults.millisec &gt; tp_inst._defaults.millisecMax? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;
			tp_inst.microsec = tp_inst._defaults.microsec &lt; tp_inst._defaults.microsecMin? tp_inst._defaults.microsecMin : 
							tp_inst._defaults.microsec &gt; tp_inst._defaults.microsecMax? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;
			tp_inst.ampm = '';
			tp_inst.$input = $input;

			if (tp_inst._defaults.altField) {
				tp_inst.$altInput = $(tp_inst._defaults.altField).css({
					cursor: 'pointer'
				}).focus(function() {
					$input.trigger("focus");
				});
			}

			if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {
				tp_inst._defaults.minDate = new Date();
			}
			if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {
				tp_inst._defaults.maxDate = new Date();
			}

			// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..
			if (tp_inst._defaults.minDate !== undefined &amp;&amp; tp_inst._defaults.minDate instanceof Date) {
				tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());
			}
			if (tp_inst._defaults.minDateTime !== undefined &amp;&amp; tp_inst._defaults.minDateTime instanceof Date) {
				tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());
			}
			if (tp_inst._defaults.maxDate !== undefined &amp;&amp; tp_inst._defaults.maxDate instanceof Date) {
				tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());
			}
			if (tp_inst._defaults.maxDateTime !== undefined &amp;&amp; tp_inst._defaults.maxDateTime instanceof Date) {
				tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());
			}
			tp_inst.$input.bind('focus', function() {
				tp_inst._onFocus();
			});

			return tp_inst;
		},

		/*
		* add our sliders to the calendar
		*/
		_addTimePicker: function(dp_inst) {
			var currDT = (this.$altInput &amp;&amp; this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();

			this.timeDefined = this._parseTime(currDT);
			this._limitMinMaxDateTime(dp_inst, false);
			this._injectTimePicker();
		},

		/*
		* parse the time string from input value or _setTime
		*/
		_parseTime: function(timeString, withDate) {
			if (!this.inst) {
				this.inst = $.datepicker._getInst(this.$input[0]);
			}

			if (withDate || !this._defaults.timeOnly) {
				var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');
				try {
					var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);
					if (!parseRes.timeObj) {
						return false;
					}
					$.extend(this, parseRes.timeObj);
				} catch (err) {
					$.timepicker.log("Error parsing the date/time string: " + err +
									"\ndate/time string = " + timeString +
									"\ntimeFormat = " + this._defaults.timeFormat +
									"\ndateFormat = " + dp_dateFormat);
					return false;
				}
				return true;
			} else {
				var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);
				if (!timeObj) {
					return false;
				}
				$.extend(this, timeObj);
				return true;
			}
		},

		/*
		* generate and inject html for timepicker into ui datepicker
		*/
		_injectTimePicker: function() {
			var $dp = this.inst.dpDiv,
				o = this.inst.settings,
				tp_inst = this,
				litem = '',
				uitem = '',
				show = null,
				max = {},
				gridSize = {},
				size = null,
				i=0,
				l=0;

			// Prevent displaying twice
			if ($dp.find("div.ui-timepicker-div").length === 0 &amp;&amp; o.showTimepicker) {
				var noDisplay = ' style="display:none;"',
					html = '&lt;div class="ui-timepicker-div'+ (o.isRTL? ' ui-timepicker-rtl' : '') +'"&gt;&lt;dl&gt;' + '&lt;dt class="ui_tpicker_time_label"' + ((o.showTime) ? '' : noDisplay) + '&gt;' + o.timeText + '&lt;/dt&gt;' + 
								'&lt;dd class="ui_tpicker_time"' + ((o.showTime) ? '' : noDisplay) + '&gt;&lt;/dd&gt;';

				// Create the markup
				for(i=0,l=this.units.length; i&lt;l; i++){
					litem = this.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

					// Added by Peter Medeiros:
					// - Figure out what the hour/minute/second max should be based on the step values.
					// - Example: if stepMinute is 15, then minMax is 45.
					max[litem] = parseInt((o[litem+'Max'] - ((o[litem+'Max'] - o[litem+'Min']) % o['step'+uitem])), 10);
					gridSize[litem] = 0;

					html += '&lt;dt class="ui_tpicker_'+ litem +'_label"' + (show ? '' : noDisplay) + '&gt;' + o[litem +'Text'] + '&lt;/dt&gt;' + 
								'&lt;dd class="ui_tpicker_'+ litem +'"&gt;&lt;div class="ui_tpicker_'+ litem +'_slider"' + (show ? '' : noDisplay) + '&gt;&lt;/div&gt;';

					if (show &amp;&amp; o[litem+'Grid'] &gt; 0) {
						html += '&lt;div style="padding-left: 1px"&gt;&lt;table class="ui-tpicker-grid-label"&gt;&lt;tr&gt;';

						if(litem == 'hour'){
							for (var h = o[litem+'Min']; h &lt;= max[litem]; h += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								var tmph = $.datepicker.formatTime(this.support.ampm? 'hht':'HH', {hour:h}, o);									
								html += '&lt;td data-for="'+litem+'"&gt;' + tmph + '&lt;/td&gt;';
							}
						}
						else{
							for (var m = o[litem+'Min']; m &lt;= max[litem]; m += parseInt(o[litem+'Grid'], 10)) {
								gridSize[litem]++;
								html += '&lt;td data-for="'+litem+'"&gt;' + ((m &lt; 10) ? '0' : '') + m + '&lt;/td&gt;';
							}
						}

						html += '&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;';
					}
					html += '&lt;/dd&gt;';
				}
				
				// Timezone
				var showTz = o.showTimezone !== null? o.showTimezone : this.support.timezone;
				html += '&lt;dt class="ui_tpicker_timezone_label"' + (showTz ? '' : noDisplay) + '&gt;' + o.timezoneText + '&lt;/dt&gt;';
				html += '&lt;dd class="ui_tpicker_timezone" ' + (showTz ? '' : noDisplay) + '&gt;&lt;/dd&gt;';

				// Create the elements from string
				html += '&lt;/dl&gt;&lt;/div&gt;';
				var $tp = $(html);

				// if we only want time picker...
				if (o.timeOnly === true) {
					$tp.prepend('&lt;div class="ui-widget-header ui-helper-clearfix ui-corner-all"&gt;' + '&lt;div class="ui-datepicker-title"&gt;' + o.timeOnlyTitle + '&lt;/div&gt;' + '&lt;/div&gt;');
					$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
				}
				
				// add sliders, adjust grids, add events
				for(i=0,l=tp_inst.units.length; i&lt;l; i++){
					litem = tp_inst.units[i];
					uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
					show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

					// add the slider
					tp_inst[litem+'_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_'+litem+'_slider'), litem, tp_inst[litem], o[litem+'Min'], max[litem], o['step'+uitem]);

					// adjust the grid and add click event
					if (show &amp;&amp; o[litem+'Grid'] &gt; 0) {
						size = 100 * gridSize[litem] * o[litem+'Grid'] / (max[litem] - o[litem+'Min']);
						$tp.find('.ui_tpicker_'+litem+' table').css({
							width: size + "%",
							marginLeft: o.isRTL? '0' : ((size / (-2 * gridSize[litem])) + "%"),
							marginRight: o.isRTL? ((size / (-2 * gridSize[litem])) + "%") : '0',
							borderCollapse: 'collapse'
						}).find("td").click(function(e){
								var $t = $(this),
									h = $t.html(),
									n = parseInt(h.replace(/[^0-9]/g),10),
									ap = h.replace(/[^apm]/ig),
									f = $t.data('for'); // loses scope, so we use data-for

								if(f == 'hour'){
									if(ap.indexOf('p') !== -1 &amp;&amp; n &lt; 12){
										n += 12;
									}
									else{
										if(ap.indexOf('a') !== -1 &amp;&amp; n === 12){
											n = 0;
										}
									}
								}
								
								tp_inst.control.value(tp_inst, tp_inst[f+'_slider'], litem, n);

								tp_inst._onTimeChange();
								tp_inst._onSelectHandler();
							}).css({
								cursor: 'pointer',
								width: (100 / gridSize[litem]) + '%',
								textAlign: 'center',
								overflow: 'hidden'
							});
					} // end if grid &gt; 0
				} // end for loop

				// Add timezone options
				this.timezone_select = $tp.find('.ui_tpicker_timezone').append('&lt;select&gt;&lt;/select&gt;').find("select");
				$.fn.append.apply(this.timezone_select,
				$.map(o.timezoneList, function(val, idx) {
					return $("&lt;option /&gt;").val(typeof val == "object" ? val.value : val).text(typeof val == "object" ? val.label : val);
				}));
				if (typeof(this.timezone) != "undefined" &amp;&amp; this.timezone !== null &amp;&amp; this.timezone !== "") {
					var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset()*-1;
					if (local_timezone == this.timezone) {
						selectLocalTimezone(tp_inst);
					} else {
						this.timezone_select.val(this.timezone);
					}
				} else {
					if (typeof(this.hour) != "undefined" &amp;&amp; this.hour !== null &amp;&amp; this.hour !== "") {
						this.timezone_select.val(o.timezone);
					} else {
						selectLocalTimezone(tp_inst);
					}
				}
				this.timezone_select.change(function() {
					tp_inst._onTimeChange();
					tp_inst._onSelectHandler();
				});
				// End timezone options
				
				// inject timepicker into datepicker
				var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');
				if ($buttonPanel.length) {
					$buttonPanel.before($tp);
				} else {
					$dp.append($tp);
				}

				this.$timeObj = $tp.find('.ui_tpicker_time');

				if (this.inst !== null) {
					var timeDefined = this.timeDefined;
					this._onTimeChange();
					this.timeDefined = timeDefined;
				}

				// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/
				if (this._defaults.addSliderAccess) {
					var sliderAccessArgs = this._defaults.sliderAccessArgs,
						rtl = this._defaults.isRTL;
					sliderAccessArgs.isRTL = rtl;
						
					setTimeout(function() { // fix for inline mode
						if ($tp.find('.ui-slider-access').length === 0) {
							$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);

							// fix any grids since sliders are shorter
							var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);
							if (sliderAccessWidth) {
								$tp.find('table:visible').each(function() {
									var $g = $(this),
										oldWidth = $g.outerWidth(),
										oldMarginLeft = $g.css(rtl? 'marginRight':'marginLeft').toString().replace('%', ''),
										newWidth = oldWidth - sliderAccessWidth,
										newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',
										css = { width: newWidth, marginRight: 0, marginLeft: 0 };
									css[rtl? 'marginRight':'marginLeft'] = newMarginLeft;
									$g.css(css);
								});
							}
						}
					}, 10);
				}
				// end slideAccess integration

				tp_inst._limitMinMaxDateTime(this.inst, true);
			}
		},

		/*
		* This function tries to limit the ability to go outside the
		* min/max date range
		*/
		_limitMinMaxDateTime: function(dp_inst, adjustSliders) {
			var o = this._defaults,
				dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);

			if (!this._defaults.showTimepicker) {
				return;
			} // No time so nothing to check here

			if ($.datepicker._get(dp_inst, 'minDateTime') !== null &amp;&amp; $.datepicker._get(dp_inst, 'minDateTime') !== undefined &amp;&amp; dp_date) {
				var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),
					minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {
					this.hourMinOriginal = o.hourMin;
					this.minuteMinOriginal = o.minuteMin;
					this.secondMinOriginal = o.secondMin;
					this.millisecMinOriginal = o.millisecMin;
					this.microsecMinOriginal = o.microsecMin;
				}

				if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMin = minDateTime.getHours();
					if (this.hour &lt;= this._defaults.hourMin) {
						this.hour = this._defaults.hourMin;
						this._defaults.minuteMin = minDateTime.getMinutes();
						if (this.minute &lt;= this._defaults.minuteMin) {
							this.minute = this._defaults.minuteMin;
							this._defaults.secondMin = minDateTime.getSeconds();
							if (this.second &lt;= this._defaults.secondMin) {
								this.second = this._defaults.secondMin;
								this._defaults.millisecMin = minDateTime.getMilliseconds();
								if(this.millisec &lt;= this._defaults.millisecMin) {
									this.millisec = this._defaults.millisecMin;
									this._defaults.microsecMin = minDateTime.getMicroseconds();
								} else {
									if (this.microsec &lt; this._defaults.microsecMin) {
										this.microsec = this._defaults.microsecMin;
									}
									this._defaults.microsecMin = this.microsecMinOriginal;
								}
							} else {
								this._defaults.millisecMin = this.millisecMinOriginal;
								this._defaults.microsecMin = this.microsecMinOriginal;
							}
						} else {
							this._defaults.secondMin = this.secondMinOriginal;
							this._defaults.millisecMin = this.millisecMinOriginal;
							this._defaults.microsecMin = this.microsecMinOriginal;
						}
					} else {
						this._defaults.minuteMin = this.minuteMinOriginal;
						this._defaults.secondMin = this.secondMinOriginal;
						this._defaults.millisecMin = this.millisecMinOriginal;
						this._defaults.microsecMin = this.microsecMinOriginal;
					}
				} else {
					this._defaults.hourMin = this.hourMinOriginal;
					this._defaults.minuteMin = this.minuteMinOriginal;
					this._defaults.secondMin = this.secondMinOriginal;
					this._defaults.millisecMin = this.millisecMinOriginal;
					this._defaults.microsecMin = this.microsecMinOriginal;
				}
			}

			if ($.datepicker._get(dp_inst, 'maxDateTime') !== null &amp;&amp; $.datepicker._get(dp_inst, 'maxDateTime') !== undefined &amp;&amp; dp_date) {
				var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),
					maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);

				if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {
					this.hourMaxOriginal = o.hourMax;
					this.minuteMaxOriginal = o.minuteMax;
					this.secondMaxOriginal = o.secondMax;
					this.millisecMaxOriginal = o.millisecMax;
					this.microsecMaxOriginal = o.microsecMax;
				}

				if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()) {
					this._defaults.hourMax = maxDateTime.getHours();
					if (this.hour &gt;= this._defaults.hourMax) {
						this.hour = this._defaults.hourMax;
						this._defaults.minuteMax = maxDateTime.getMinutes();
						if (this.minute &gt;= this._defaults.minuteMax) {
							this.minute = this._defaults.minuteMax;
							this._defaults.secondMax = maxDateTime.getSeconds();
							if (this.second &gt;= this._defaults.secondMax) {
								this.second = this._defaults.secondMax;
								this._defaults.millisecMax = maxDateTime.getMilliseconds();
								if (this.millisec &gt;= this._defaults.millisecMax) {
									this.millisec = this._defaults.millisecMax;
									this._defaults.microsecMax = maxDateTime.getMicroseconds();
								} else {
									if (this.microsec &gt; this._defaults.microsecMax) {
										this.microsec = this._defaults.microsecMax;
									}
									this._defaults.microsecMax = this.microsecMaxOriginal;
								}
							} else {
								this._defaults.millisecMax = this.millisecMaxOriginal;
								this._defaults.microsecMax = this.microsecMaxOriginal;
							}
						} else {
							this._defaults.secondMax = this.secondMaxOriginal;
							this._defaults.millisecMax = this.millisecMaxOriginal;
							this._defaults.microsecMax = this.microsecMaxOriginal;
						}
					} else {
						this._defaults.minuteMax = this.minuteMaxOriginal;
						this._defaults.secondMax = this.secondMaxOriginal;
						this._defaults.millisecMax = this.millisecMaxOriginal;
						this._defaults.microsecMax = this.microsecMaxOriginal;
					}
				} else {
					this._defaults.hourMax = this.hourMaxOriginal;
					this._defaults.minuteMax = this.minuteMaxOriginal;
					this._defaults.secondMax = this.secondMaxOriginal;
					this._defaults.millisecMax = this.millisecMaxOriginal;
					this._defaults.microsecMax = this.microsecMaxOriginal;
				}
			}

			if (adjustSliders !== undefined &amp;&amp; adjustSliders === true) {
				var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),
					minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),
					secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),
					millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10);
					microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);

				if (this.hour_slider) {
					this.control.options(this, this.hour_slider, 'hour', { min: this._defaults.hourMin, max: hourMax });
					this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));
				}
				if (this.minute_slider) {
					this.control.options(this, this.minute_slider, 'minute', { min: this._defaults.minuteMin, max: minMax });
					this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));
				}
				if (this.second_slider) {
					this.control.options(this, this.second_slider, 'second', { min: this._defaults.secondMin, max: secMax });
					this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));
				}
				if (this.millisec_slider) {
					this.control.options(this, this.millisec_slider, 'millisec', { min: this._defaults.millisecMin, max: millisecMax });
					this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));
				}
				if (this.microsec_slider) {
					this.control.options(this, this.microsec_slider, 'microsec', { min: this._defaults.microsecMin, max: microsecMax });
					this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));
				}
			}

		},

		/*
		* when a slider moves, set the internal time...
		* on time change is also called when the time is updated in the text field
		*/
		_onTimeChange: function() {
			var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,
				minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,
				second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,
				millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,
				microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,
				timezone = (this.timezone_select) ? this.timezone_select.val() : false,
				o = this._defaults,
				pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,
				pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;

			if (typeof(hour) == 'object') {
				hour = false;
			}
			if (typeof(minute) == 'object') {
				minute = false;
			}
			if (typeof(second) == 'object') {
				second = false;
			}
			if (typeof(millisec) == 'object') {
				millisec = false;
			}
			if (typeof(microsec) == 'object') {
				microsec = false;
			}
			if (typeof(timezone) == 'object') {
				timezone = false;
			}

			if (hour !== false) {
				hour = parseInt(hour, 10);
			}
			if (minute !== false) {
				minute = parseInt(minute, 10);
			}
			if (second !== false) {
				second = parseInt(second, 10);
			}
			if (millisec !== false) {
				millisec = parseInt(millisec, 10);
			}
			if (microsec !== false) {
				microsec = parseInt(microsec, 10);
			}

			var ampm = o[hour &lt; 12 ? 'amNames' : 'pmNames'][0];

			// If the update was done in the input field, the input field should not be updated.
			// If the update was done using the sliders, update the input field.
			var hasChanged = (hour != this.hour || minute != this.minute || second != this.second || millisec != this.millisec || microsec != this.microsec 
								|| (this.ampm.length &gt; 0 &amp;&amp; (hour &lt; 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) 
								|| (this.timezone !== null &amp;&amp; timezone != this.timezone));

			if (hasChanged) {

				if (hour !== false) {
					this.hour = hour;
				}
				if (minute !== false) {
					this.minute = minute;
				}
				if (second !== false) {
					this.second = second;
				}
				if (millisec !== false) {
					this.millisec = millisec;
				}
				if (microsec !== false) {
					this.microsec = microsec;
				}
				if (timezone !== false) {
					this.timezone = timezone;
				}

				if (!this.inst) {
					this.inst = $.datepicker._getInst(this.$input[0]);
				}

				this._limitMinMaxDateTime(this.inst, true);
			}
			if (this.support.ampm) {
				this.ampm = ampm;
			}

			// Updates the time within the timepicker
			this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);
			if (this.$timeObj) {
				if(pickerTimeFormat === o.timeFormat){
					this.$timeObj.text(this.formattedTime + pickerTimeSuffix);
				}
				else{
					this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);
				}
			}

			this.timeDefined = true;
			if (hasChanged) {
				this._updateDateTime();
			}
		},

		/*
		* call custom onSelect.
		* bind to sliders slidestop, and grid click.
		*/
		_onSelectHandler: function() {
			var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;
			var inputEl = this.$input ? this.$input[0] : null;
			if (onSelect &amp;&amp; inputEl) {
				onSelect.apply(inputEl, [this.formattedDateTime, this]);
			}
		},

		/*
		* update our input with the new date time..
		*/
		_updateDateTime: function(dp_inst) {
			dp_inst = this.inst || dp_inst;
			//var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
			var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),
				dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),
				formatCfg = $.datepicker._getFormatConfig(dp_inst),
				timeAvailable = dt !== null &amp;&amp; this.timeDefined;
			this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
			var formattedDateTime = this.formattedDate;
			
			// if a slider was changed but datepicker doesn't have a value yet, set it
			if(dp_inst.lastVal===""){
                dp_inst.currentYear=dp_inst.selectedYear;
                dp_inst.currentMonth=dp_inst.selectedMonth;
                dp_inst.currentDay=dp_inst.selectedDay;
            }

			/*
			* remove following lines to force every changes in date picker to change the input value
			* Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. 
			* If the user manually empty the value in the input field, the date picker will never change selected value.
			*/
			//if (dp_inst.lastVal !== undefined &amp;&amp; (dp_inst.lastVal.length &gt; 0 &amp;&amp; this.$input.val().length === 0)) {
			//	return;
			//}

			if (this._defaults.timeOnly === true) {
				formattedDateTime = this.formattedTime;
			} else if (this._defaults.timeOnly !== true &amp;&amp; (this._defaults.alwaysSetTime || timeAvailable)) {
				formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;
			}

			this.formattedDateTime = formattedDateTime;

			if (!this._defaults.showTimepicker) {
				this.$input.val(this.formattedDate);
			} else if (this.$altInput &amp;&amp; this._defaults.timeOnly === false &amp;&amp; this._defaults.altFieldTimeOnly === true) {
				this.$altInput.val(this.formattedTime);
				this.$input.val(this.formattedDate);
			} else if (this.$altInput) {
				this.$input.val(formattedDateTime);
				var altFormattedDateTime = '',
					altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,
					altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;
				
				if(!this._defaults.timeOnly){
					if (this._defaults.altFormat){
						altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);
					}
					else{
						altFormattedDateTime = this.formattedDate;
					}

					if (altFormattedDateTime){
						altFormattedDateTime += altSeparator;
					}
				}

				if(this._defaults.altTimeFormat){
					altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;
				}
				else{
					altFormattedDateTime += this.formattedTime + altTimeSuffix;
				}
				this.$altInput.val(altFormattedDateTime);
			} else {
				this.$input.val(formattedDateTime);
			}

			this.$input.trigger("change");
		},

		_onFocus: function() {
			if (!this.$input.val() &amp;&amp; this._defaults.defaultValue) {
				this.$input.val(this._defaults.defaultValue);
				var inst = $.datepicker._getInst(this.$input.get(0)),
					tp_inst = $.datepicker._get(inst, 'timepicker');
				if (tp_inst) {
					if (tp_inst._defaults.timeOnly &amp;&amp; (inst.input.val() != inst.lastVal)) {
						try {
							$.datepicker._updateDatepicker(inst);
						} catch (err) {
							$.timepicker.log(err);
						}
					}
				}
			}
		},

		/*
		* Small abstraction to control types
		* We can add more, just be sure to follow the pattern: create, options, value
		*/
		_controls: {
			// slider methods
			slider: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var rtl = tp_inst._defaults.isRTL; // if rtl go -60-&gt;0 instead of 0-&gt;60
					return obj.prop('slide', null).slider({
						orientation: "horizontal",
						value: rtl? val*-1 : val,
						min: rtl? max*-1 : min,
						max: rtl? min*-1 : max,
						step: step,
						slide: function(event, ui) {
							tp_inst.control.value(tp_inst, $(this), unit, rtl? ui.value*-1:ui.value);
							tp_inst._onTimeChange();
						},
						stop: function(event, ui) {
							tp_inst._onSelectHandler();
						}
					});	
				},
				options: function(tp_inst, obj, unit, opts, val){
					if(tp_inst._defaults.isRTL){
						if(typeof(opts) == 'string'){
							if(opts == 'min' || opts == 'max'){
								if(val !== undefined){
									return obj.slider(opts, val*-1);
								}
								return Math.abs(obj.slider(opts));
							}
							return obj.slider(opts);
						}
						var min = opts.min, 
							max = opts.max;
						opts.min = opts.max = null;
						if(min !== undefined){
							opts.max = min * -1;
						}
						if(max !== undefined){
							opts.min = max * -1;
						}
						return obj.slider(opts);
					}
					if(typeof(opts) == 'string' &amp;&amp; val !== undefined){
							return obj.slider(opts, val);
					}
					return obj.slider(opts);
				},
				value: function(tp_inst, obj, unit, val){
					if(tp_inst._defaults.isRTL){
						if(val !== undefined){
							return obj.slider('value', val*-1);
						}
						return Math.abs(obj.slider('value'));
					}
					if(val !== undefined){
						return obj.slider('value', val);
					}
					return obj.slider('value');
				}
			},
			// select methods
			select: {
				create: function(tp_inst, obj, unit, val, min, max, step){
					var sel = '&lt;select class="ui-timepicker-select" data-unit="'+ unit +'" data-min="'+ min +'" data-max="'+ max +'" data-step="'+ step +'"&gt;',
						format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;

					for(var i=min; i&lt;=max; i+=step){						
						sel += '&lt;option value="'+ i +'"'+ (i==val? ' selected':'') +'&gt;';
						if(unit == 'hour'){
							sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig,'')), {hour:i}, tp_inst._defaults);
						}
						else if(unit == 'millisec' || unit == 'microsec' || i &gt;= 10){ sel += i; }
						else {sel += '0'+ i.toString(); }
						sel += '&lt;/option&gt;';
					}
					sel += '&lt;/select&gt;';

					obj.children('select').remove();

					$(sel).appendTo(obj).change(function(e){
						tp_inst._onTimeChange();
						tp_inst._onSelectHandler();
					});

					return obj;
				},
				options: function(tp_inst, obj, unit, opts, val){
					var o = {},
						$t = obj.children('select');
					if(typeof(opts) == 'string'){
						if(val === undefined){
							return $t.data(opts);
						}
						o[opts] = val;	
					}
					else{ o = opts; }
					return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));
				},
				value: function(tp_inst, obj, unit, val){
					var $t = obj.children('select');
					if(val !== undefined){
						return $t.val(val);
					}
					return $t.val();
				}
			}
		} // end _controls

	});

	$.fn.extend({
		/*
		* shorthand just to use timepicker..
		*/
		timepicker: function(o) {
			o = o || {};
			var tmp_args = Array.prototype.slice.call(arguments);

			if (typeof o == 'object') {
				tmp_args[0] = $.extend(o, {
					timeOnly: true
				});
			}

			return $(this).each(function() {
				$.fn.datetimepicker.apply($(this), tmp_args);
			});
		},

		/*
		* extend timepicker to datepicker
		*/
		datetimepicker: function(o) {
			o = o || {};
			var tmp_args = arguments;

			if (typeof(o) == 'string') {
				if (o == 'getDate') {
					return $.fn.datepicker.apply($(this[0]), tmp_args);
				} else {
					return this.each(function() {
						var $t = $(this);
						$t.datepicker.apply($t, tmp_args);
					});
				}
			} else {
				return this.each(function() {
					var $t = $(this);
					$t.datepicker($.timepicker._newInst($t, o)._defaults);
				});
			}
		}
	});

	/*
	* Public Utility to parse date and time
	*/
	$.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);
		if (parseRes.timeObj) {
			var t = parseRes.timeObj;
			parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);
			parseRes.date.setMicroseconds(t.microsec);
		}

		return parseRes.date;
	};

	/*
	* Public utility to parse time
	*/
	$.datepicker.parseTime = function(timeFormat, timeString, options) {		
		var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),
			iso8601 = (timeFormat.replace(/\'.*?\'/g,'').indexOf('Z') !== -1);

		// Strict parse requires the timeString to match the timeFormat exactly
		var strictParse = function(f, s, o){

			// pattern for standard and localized AM/PM markers
			var getPatternAmpm = function(amNames, pmNames) {
				var markers = [];
				if (amNames) {
					$.merge(markers, amNames);
				}
				if (pmNames) {
					$.merge(markers, pmNames);
				}
				markers = $.map(markers, function(val) {
					return val.replace(/[.*+?|()\[\]{}\\]/g, '\\$&amp;');
				});
				return '(' + markers.join('|') + ')?';
			};

			// figure out position of time elements.. cause js cant do named captures
			var getFormatPositions = function(timeFormat) {
				var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),
					orders = {
						h: -1,
						m: -1,
						s: -1,
						l: -1,
						c: -1,
						t: -1,
						z: -1
					};

				if (finds) {
					for (var i = 0; i &lt; finds.length; i++) {
						if (orders[finds[i].toString().charAt(0)] == -1) {
							orders[finds[i].toString().charAt(0)] = i + 1;
						}
					}
				}
				return orders;
			};

			var regstr = '^' + f.toString()
					.replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {
							var ml = match.length;
							switch (match.charAt(0).toLowerCase()) {
								case 'h': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 'm': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 's': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
								case 'l': return '(\\d?\\d?\\d)';
								case 'c': return '(\\d?\\d?\\d)';
								case 'z': return '(z|[-+]\\d\\d:?\\d\\d|\\S+)?';
								case 't': return getPatternAmpm(o.amNames, o.pmNames);
								default:    // literal escaped in quotes
									return '(' + match.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function (m) { return "\\" + m; }) + ')?';
							}
						})
					.replace(/\s/g, '\\s?') +
					o.timeSuffix + '$',
				order = getFormatPositions(f),
				ampm = '',
				treg;

			treg = s.match(new RegExp(regstr, 'i'));

			var resTime = {
				hour: 0,
				minute: 0,
				second: 0,
				millisec: 0,
				microsec: 0
			};

			if (treg) {
				if (order.t !== -1) {
					if (treg[order.t] === undefined || treg[order.t].length === 0) {
						ampm = '';
						resTime.ampm = '';
					} else {
						ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';
						resTime.ampm = o[ampm == 'AM' ? 'amNames' : 'pmNames'][0];
					}
				}

				if (order.h !== -1) {
					if (ampm == 'AM' &amp;&amp; treg[order.h] == '12') {
						resTime.hour = 0; // 12am = 0 hour
					} else {
						if (ampm == 'PM' &amp;&amp; treg[order.h] != '12') {
							resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12
						} else {
							resTime.hour = Number(treg[order.h]);
						}
					}
				}

				if (order.m !== -1) {
					resTime.minute = Number(treg[order.m]);
				}
				if (order.s !== -1) {
					resTime.second = Number(treg[order.s]);
				}
				if (order.l !== -1) {
					resTime.millisec = Number(treg[order.l]);
				}
				if (order.c !== -1) {
					resTime.microsec = Number(treg[order.c]);
				}
				if (order.z !== -1 &amp;&amp; treg[order.z] !== undefined) {
					resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);
				}


				return resTime;
			}
			return false;
		};// end strictParse

		// First try JS Date, if that fails, use strictParse
		var looseParse = function(f,s,o){
			try{
				var d = new Date('2012-01-01 '+ s);
				if(isNaN(d.getTime())){
					d = new Date('2012-01-01T'+ s);
					if(isNaN(d.getTime())){
						d = new Date('01/01/2012 '+ s);
						if(isNaN(d.getTime())){
							throw "Unable to parse time with native Date: "+ s;
						}
					}
				}

				return {
					hour: d.getHours(),
					minute: d.getMinutes(),
					second: d.getSeconds(),
					millisec: d.getMilliseconds(),
					microsec: d.getMicroseconds(),
					timezone: d.getTimezoneOffset()*-1
				};
			}
			catch(err){
				try{
					return strictParse(f,s,o);
				}
				catch(err2){
					$.timepicker.log("Unable to parse \ntimeString: "+ s +"\ntimeFormat: "+ f);
				}				
			}
			return false;
		}; // end looseParse
		
		if(typeof o.parse === "function"){
			return o.parse(timeFormat, timeString, o);
		}
		if(o.parse === 'loose'){
			return looseParse(timeFormat, timeString, o);
		}
		return strictParse(timeFormat, timeString, o);
	};

	/*
	* Public utility to format the time
	* format = string format of the time
	* time = a {}, not a Date() for timezones
	* options = essentially the regional[].. amNames, pmNames, ampm
	*/
	$.datepicker.formatTime = function(format, time, options) {
		options = options || {};
		options = $.extend({}, $.timepicker._defaults, options);
		time = $.extend({
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			timezone: 0
		}, time);

		var tmptime = format,
			ampmName = options.amNames[0],
			hour = parseInt(time.hour, 10);

		if (hour &gt; 11) {
			ampmName = options.pmNames[0];
		}

		tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|('.*?'|".*?"))/g, function(match) {
		switch (match) {
			case 'HH':
				return ('0' + hour).slice(-2);
			case 'H':
				return hour;
			case 'hh':
				return ('0' + convert24to12(hour)).slice(-2);
			case 'h':
				return convert24to12(hour);
			case 'mm':
				return ('0' + time.minute).slice(-2);
			case 'm':
				return time.minute;
			case 'ss':
				return ('0' + time.second).slice(-2);
			case 's':
				return time.second;
			case 'l':
				return ('00' + time.millisec).slice(-3);
			case 'c':
				return ('00' + time.microsec).slice(-3);
			case 'z':
				return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, false);
			case 'Z':
				return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, true);
			case 'T': 
				return ampmName.charAt(0).toUpperCase();
			case 'TT': 
				return ampmName.toUpperCase();
			case 't':
				return ampmName.charAt(0).toLowerCase();
			case 'tt':
				return ampmName.toLowerCase();
			default:
				return match.replace(/\'/g, "") || "'";
			}
		});

		tmptime = $.trim(tmptime);
		return tmptime;
	};

	/*
	* the bad hack :/ override datepicker so it doesnt close on select
	// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378
	*/
	$.datepicker._base_selectDate = $.datepicker._selectDate;
	$.datepicker._selectDate = function(id, dateStr) {
		var inst = this._getInst($(id)[0]),
			tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			tp_inst._limitMinMaxDateTime(inst, true);
			inst.inline = inst.stay_open = true;
			//This way the onSelect handler called from calendarpicker get the full dateTime
			this._base_selectDate(id, dateStr);
			inst.inline = inst.stay_open = false;
			this._notifyChange(inst);
			this._updateDatepicker(inst);
		} else {
			this._base_selectDate(id, dateStr);
		}
	};

	/*
	* second bad hack :/ override datepicker so it triggers an event when changing the input field
	* and does not redraw the datepicker on every selectDate event
	*/
	$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
	$.datepicker._updateDatepicker = function(inst) {

		// don't popup the datepicker if there is another instance already opened
		var input = inst.input[0];
		if ($.datepicker._curInst &amp;&amp; $.datepicker._curInst != inst &amp;&amp; $.datepicker._datepickerShowing &amp;&amp; $.datepicker._lastInput != input) {
			return;
		}

		if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {

			this._base_updateDatepicker(inst);

			// Reload the time control when changing something in the input text field.
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				tp_inst._addTimePicker(inst);
			}
		}
	};

	/*
	* third bad hack :/ override datepicker so it allows spaces and colon in the input field
	*/
	$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
	$.datepicker._doKeyPress = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if ($.datepicker._get(inst, 'constrainInput')) {
				var ampm = tp_inst.support.ampm,
					tz = tp_inst._defaults.showTimezone !== null? tp_inst._defaults.showTimezone : tp_inst.support.timezone,					
					dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),
					datetimeChars = tp_inst._defaults.timeFormat.toString()
											.replace(/[hms]/g, '')
											.replace(/TT/g, ampm ? 'APM' : '')
											.replace(/Tt/g, ampm ? 'AaPpMm' : '')
											.replace(/tT/g, ampm ? 'AaPpMm' : '')
											.replace(/T/g, ampm ? 'AP' : '')
											.replace(/tt/g, ampm ? 'apm' : '')
											.replace(/t/g, ampm ? 'ap' : '') + 
											" " + tp_inst._defaults.separator + 
											tp_inst._defaults.timeSuffix + 
											(tz ? tp_inst._defaults.timezoneList.join('') : '') + 
											(tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) + 
											dateChars,
					chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
				return event.ctrlKey || (chr &lt; ' ' || !dateChars || datetimeChars.indexOf(chr) &gt; -1);
			}
		}

		return $.datepicker._base_doKeyPress(event);
	};

	/*
	* Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField
	*/
	$.datepicker._base_updateAlternate = $.datepicker._updateAlternate;
	/* Update any alternate field to synchronise with the main field. */
	$.datepicker._updateAlternate = function(inst) {
		var tp_inst = this._get(inst, 'timepicker');
		if(tp_inst){
			var altField = tp_inst._defaults.altField;
			if (altField) { // update alternate field too
				var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,
					date = this._getDate(inst),
					formatCfg = $.datepicker._getFormatConfig(inst),
					altFormattedDateTime = '', 
					altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator, 
					altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,
					altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;
				
				altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;
				if(!tp_inst._defaults.timeOnly &amp;&amp; !tp_inst._defaults.altFieldTimeOnly &amp;&amp; date !== null){
					if(tp_inst._defaults.altFormat){
						altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;
					}
					else{
						altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;
					}
				}
				$(altField).val(altFormattedDateTime);
			}
		}
		else{
			$.datepicker._base_updateAlternate(inst);
		}
	};

	/*
	* Override key up event to sync manual input changes.
	*/
	$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
	$.datepicker._doKeyUp = function(event) {
		var inst = $.datepicker._getInst(event.target),
			tp_inst = $.datepicker._get(inst, 'timepicker');

		if (tp_inst) {
			if (tp_inst._defaults.timeOnly &amp;&amp; (inst.input.val() != inst.lastVal)) {
				try {
					$.datepicker._updateDatepicker(inst);
				} catch (err) {
					$.timepicker.log(err);
				}
			}
		}

		return $.datepicker._base_doKeyUp(event);
	};

	/*
	* override "Today" button to also grab the time.
	*/
	$.datepicker._base_gotoToday = $.datepicker._gotoToday;
	$.datepicker._gotoToday = function(id) {
		var inst = this._getInst($(id)[0]),
			$dp = inst.dpDiv;
		this._base_gotoToday(id);
		var tp_inst = this._get(inst, 'timepicker');
		selectLocalTimezone(tp_inst);
		var now = new Date();
		this._setTime(inst, now);
		$('.ui-datepicker-today', $dp).click();
	};

	/*
	* Disable &amp; enable the Time in the datetimepicker
	*/
	$.datepicker._disableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = false;
			tp_inst._updateDateTime(inst);
		}
	};

	$.datepicker._enableTimepickerDatepicker = function(target) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');
		$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
		if (tp_inst) {
			tp_inst._defaults.showTimepicker = true;
			tp_inst._addTimePicker(inst); // Could be disabled on page load
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create our own set time function
	*/
	$.datepicker._setTime = function(inst, date) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var defaults = tp_inst._defaults;

			// calling _setTime with no date sets time to defaults
			tp_inst.hour = date ? date.getHours() : defaults.hour;
			tp_inst.minute = date ? date.getMinutes() : defaults.minute;
			tp_inst.second = date ? date.getSeconds() : defaults.second;
			tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;
			tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;

			//check if within min/max times.. 
			tp_inst._limitMinMaxDateTime(inst, true);

			tp_inst._onTimeChange();
			tp_inst._updateDateTime(inst);
		}
	};

	/*
	* Create new public method to set only time, callable as $().datepicker('setTime', date)
	*/
	$.datepicker._setTimeDatepicker = function(target, date, withDate) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			this._setDateFromField(inst);
			var tp_date;
			if (date) {
				if (typeof date == "string") {
					tp_inst._parseTime(date, withDate);
					tp_date = new Date();
					tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
					tp_date.setMicroseconds(tp_inst.microsec);
				} else {
					tp_date = new Date(date.getTime());
					tp_date.setMicroseconds(date.getMicroseconds());
				}
				if (tp_date.toString() == 'Invalid Date') {
					tp_date = undefined;
				}
				this._setTime(inst, tp_date);
			}
		}

	};

	/*
	* override setDate() to allow setting time too within Date object
	*/
	$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
	$.datepicker._setDateDatepicker = function(target, date) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		if(typeof(date) === 'string'){
			date = new Date(date);
			if(!date.getTime()){
				$.timepicker.log("Error creating Date object from string.");
			}
		}

		var tp_inst = this._get(inst, 'timepicker');
		var tp_date;
		if (date instanceof Date) {
			tp_date = new Date(date.getTime());
			tp_date.setMicroseconds(date.getMicroseconds());
		} else {
			tp_date = date;
		}
		
		// This is important if you are using the timezone option, javascript's Date 
		// object will only return the timezone offset for the current locale, so we 
		// adjust it accordingly.  If not using timezone option this won't matter..
		// If a timezone is different in tp, keep the timezone as is
		if(tp_inst){
			// look out for DST if tz wasn't specified
			if(!tp_inst.support.timezone &amp;&amp; tp_inst._defaults.timezone === null){
				tp_inst.timezone = tp_date.getTimezoneOffset()*-1;
			}
			date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
			tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);
		}

		this._updateDatepicker(inst);
		this._base_setDateDatepicker.apply(this, arguments);
		this._setTimeDatepicker(target, tp_date, true);
	};

	/*
	* override getDate() to allow getting time too within Date object
	*/
	$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
	$.datepicker._getDateDatepicker = function(target, noDefault) {
		var inst = this._getInst(target);
		if (!inst) {
			return;
		}

		var tp_inst = this._get(inst, 'timepicker');

		if (tp_inst) {
			// if it hasn't yet been defined, grab from field
			if(inst.lastVal === undefined){
				this._setDateFromField(inst, noDefault);
			}

			var date = this._getDate(inst);
			if (date &amp;&amp; tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {
				date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
				date.setMicroseconds(tp_inst.microsec);

				// This is important if you are using the timezone option, javascript's Date 
				// object will only return the timezone offset for the current locale, so we 
				// adjust it accordingly.  If not using timezone option this won't matter..
				if(tp_inst.timezone != null){
					// look out for DST if tz wasn't specified
					if(!tp_inst.support.timezone &amp;&amp; tp_inst._defaults.timezone === null){
						tp_inst.timezone = date.getTimezoneOffset()*-1;
					}
					date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
				}
			}
			return date;
		}
		return this._base_getDateDatepicker(target, noDefault);
	};

	/*
	* override parseDate() because UI 1.8.14 throws an error about "Extra characters"
	* An option in datapicker to ignore extra format characters would be nicer.
	*/
	$.datepicker._base_parseDate = $.datepicker.parseDate;
	$.datepicker.parseDate = function(format, value, settings) {
		var date;
		try {
			date = this._base_parseDate(format, value, settings);
		} catch (err) {
			// Hack!  The error message ends with a colon, a space, and
			// the "extra" characters.  We rely on that instead of
			// attempting to perfectly reproduce the parsing algorithm.
			if (err.indexOf(":") &gt;= 0) {
				date = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);
				$.timepicker.log("Error parsing the date string: " + err + "\ndate string = " + value + "\ndate format = " + format);
			} else {
				throw err;
			}
		}
		return date;
	};

	/*
	* override formatDate to set date with time to the input
	*/
	$.datepicker._base_formatDate = $.datepicker._formatDate;
	$.datepicker._formatDate = function(inst, day, month, year) {
		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			tp_inst._updateDateTime(inst);
			return tp_inst.$input.val();
		}
		return this._base_formatDate(inst);
	};

	/*
	* override options setter to add time to maxDate(Time) and minDate(Time). MaxDate
	*/
	$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
	$.datepicker._optionDatepicker = function(target, name, value) {
		var inst = this._getInst(target),
	        name_clone;
		if (!inst) {
			return null;
		}

		var tp_inst = this._get(inst, 'timepicker');
		if (tp_inst) {
			var min = null,
				max = null,
				onselect = null,
				overrides = tp_inst._defaults.evnts,
				fns = {},
				prop;
		    if (typeof name == 'string') { // if min/max was set with the string
		        if (name === 'minDate' || name === 'minDateTime') {
		            min = value;
		        } else if (name === 'maxDate' || name === 'maxDateTime') {
		            max = value;
		        } else if (name === 'onSelect') {
		            onselect = value;
		        } else if (overrides.hasOwnProperty(name)) {
		            if (typeof (value) === 'undefined') {
		                return overrides[name];
		            }
		            fns[name] = value;
		            name_clone = {}; //empty results in exiting function after overrides updated
		        }
		    } else if (typeof name == 'object') { //if min/max was set with the JSON
		        if (name.minDate) {
		            min = name.minDate;
		        } else if (name.minDateTime) {
		            min = name.minDateTime;
		        } else if (name.maxDate) {
		            max = name.maxDate;
		        } else if (name.maxDateTime) {
		            max = name.maxDateTime;
		        }
		        for (prop in overrides) {
		            if (overrides.hasOwnProperty(prop) &amp;&amp; name[prop]) {
		                fns[prop] = name[prop];
		            }
		        }
		    }
		    for (prop in fns) {
		        if (fns.hasOwnProperty(prop)) {
		            overrides[prop] = fns[prop];
		            if (!name_clone) { name_clone = $.extend({}, name);}
		            delete name_clone[prop];
		        }
		    }
		    if (name_clone &amp;&amp; isEmptyObject(name_clone)) { return; }
		    if (min) { //if min was set
		        if (min === 0) {
		            min = new Date();
		        } else {
		            min = new Date(min);
		        }
		        tp_inst._defaults.minDate = min;
		        tp_inst._defaults.minDateTime = min;
		    } else if (max) { //if max was set
		        if (max === 0) {
		            max = new Date();
		        } else {
		            max = new Date(max);
		        }
		        tp_inst._defaults.maxDate = max;
		        tp_inst._defaults.maxDateTime = max;
		    } else if (onselect) {
		        tp_inst._defaults.onSelect = onselect;
		    }
		}
		if (value === undefined) {
			return this._base_optionDatepicker.call($.datepicker, target, name);
		}
		return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);
	};
	
	/*
	* jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,
	* it will return false for all objects
	*/
	var isEmptyObject = function(obj) {
		var prop;
		for (prop in obj) {
			if (obj.hasOwnProperty(obj)) {
				return false;
			}
		}
		return true;
	};

	/*
	* jQuery extend now ignores nulls!
	*/
	var extendRemove = function(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] === null || props[name] === undefined) {
				target[name] = props[name];
			}
		}
		return target;
	};

	/*
	* Determine by the time format which units are supported
	* Returns an object of booleans for each unit
	*/
	var detectSupport = function(timeFormat){
		var tf = timeFormat.replace(/\'.*?\'/g,'').toLowerCase(), // removes literals
			isIn = function(f, t){ // does the format contain the token?
					return f.indexOf(t) !== -1? true:false; 
				};
		return {
				hour: isIn(tf,'h'),
				minute: isIn(tf,'m'),
				second: isIn(tf,'s'),
				millisec: isIn(tf,'l'),
				microsec: isIn(tf,'c'),
				timezone: isIn(tf,'z'),
				ampm: isIn(tf,'t') &amp;&amp; isIn(timeFormat,'h'),
				iso8601: isIn(timeFormat, 'Z')
			};
	};

	/*
	* Converts 24 hour format into 12 hour
	* Returns 12 hour without leading 0
	*/
	var convert24to12 = function(hour) {
		if (hour &gt; 12) {
			hour = hour - 12;
		}

		if (hour === 0) {
			hour = 12;
		}

		return String(hour);
	};

	/*
	* Splits datetime string into date ans time substrings.
	* Throws exception when date can't be parsed
	* Returns [dateString, timeString]
	*/
	var splitDateTime = function(dateFormat, dateTimeString, dateSettings, timeSettings) {
		try {
			// The idea is to get the number separator occurances in datetime and the time format requested (since time has 
			// fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.
			var separator = timeSettings &amp;&amp; timeSettings.separator ? timeSettings.separator : $.timepicker._defaults.separator,
				format = timeSettings &amp;&amp; timeSettings.timeFormat ? timeSettings.timeFormat : $.timepicker._defaults.timeFormat,
				timeParts = format.split(separator), // how many occurances of separator may be in our format?
				timePartsLen = timeParts.length,
				allParts = dateTimeString.split(separator),
				allPartsLen = allParts.length;

			if (allPartsLen &gt; 1) {
				return [
						allParts.splice(0,allPartsLen-timePartsLen).join(separator),
						allParts.splice(0,timePartsLen).join(separator)
					];
			}

		} catch (err) {
			$.timepicker.log('Could not split the date from the time. Please check the following datetimepicker options' +
					"\nthrown error: " + err +
					"\ndateTimeString" + dateTimeString +
					"\ndateFormat = " + dateFormat +
					"\nseparator = " + timeSettings.separator +
					"\ntimeFormat = " + timeSettings.timeFormat);

			if (err.indexOf(":") &gt;= 0) {
				// Hack!  The error message ends with a colon, a space, and
				// the "extra" characters.  We rely on that instead of
				// attempting to perfectly reproduce the parsing algorithm.
				var dateStringLength = dateTimeString.length - (err.length - err.indexOf(':') - 2),
					timeString = dateTimeString.substring(dateStringLength);

				return [$.trim(dateTimeString.substring(0, dateStringLength)), $.trim(dateTimeString.substring(dateStringLength))];

			} else {
				throw err;
			}
		}
		return [dateTimeString, ''];
	};

	/*
	* Internal function to parse datetime interval
	* Returns: {date: Date, timeObj: Object}, where
	*   date - parsed date without time (type Date)
	*   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional
	*/
	var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
		var date;
		var splitRes = splitDateTime(dateFormat, dateTimeString, dateSettings, timeSettings);
		date = $.datepicker._base_parseDate(dateFormat, splitRes[0], dateSettings);
		if (splitRes[1] !== '') {
			var timeString = splitRes[1],
				parsedTime = $.datepicker.parseTime(timeFormat, timeString, timeSettings);

			if (parsedTime === null) {
				throw 'Wrong time format';
			}
			return {
				date: date,
				timeObj: parsedTime
			};
		} else {
			return {
				date: date
			};
		}
	};

	/*
	* Internal function to set timezone_select to the local timezone
	*/
	var selectLocalTimezone = function(tp_inst, date) {
		if (tp_inst &amp;&amp; tp_inst.timezone_select) {
			var now = typeof date !== 'undefined' ? date : new Date();
			tp_inst.timezone_select.val(now.getTimezoneOffset()*-1);
		}
	};

	/*
	* Create a Singleton Insance
	*/
	$.timepicker = new Timepicker();

	/**
	 * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)
	 * @param  number if not a number this value is returned
	 * @param boolean if true formats in accordance to iso8601 "+12:45"
	 * @return string
	 */
	$.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {
		if(isNaN(tzMinutes) || tzMinutes &gt; 840){
			return tzMinutes;
		}

		var off = tzMinutes,
			minutes = off % 60,
			hours = (off - minutes) / 60,
			iso = iso8601? ':':'',
			tz = (off &gt;= 0 ? '+' : '-') + ('0' + (hours * 101).toString()).slice(-2) + iso + ('0' + (minutes * 101).toString()).slice(-2);
		
		if(tz == '+00:00'){
			return 'Z';
		}
		return tz;
	};

	/**
	 * Get the number in minutes that represents a timezone string
	 * @param  string formated like "+0500", "-1245"
	 * @return number
	 */
	$.timepicker.timezoneOffsetNumber = function(tzString) {
		tzString = tzString.toString().replace(':',''); // excuse any iso8601, end up with "+1245"

		if(tzString.toUpperCase() === 'Z'){ // if iso8601 with Z, its 0 minute offset
			return 0;
		}

		if(!/^(\-|\+)\d{4}$/.test(tzString)){ // possibly a user defined tz, so just give it back
			return tzString;
		}

		return ((tzString.substr(0,1) =='-'? -1 : 1) * // plus or minus
					((parseInt(tzString.substr(1,2),10)*60) + // hours (converted to minutes)
					parseInt(tzString.substr(3,2),10))); // minutes
	};

	/**
	 * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)
	 * @param  date
	 * @param  string formated like "+0500", "-1245"
	 * @return date
	 */
	$.timepicker.timezoneAdjust = function(date, toTimezone) {
		var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);
		if(!isNaN(toTz)){
			date.setMinutes(date.getMinutes()*1 + (date.getTimezoneOffset()*-1 - toTz*1) );
		}
		return date;
	};

	/**
	 * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * n.b. The input value must be correctly formatted (reformatting is not supported)
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the timepicker() call
	 * @return jQuery
	 */
	$.timepicker.timeRange = function(startTime, endTime, options) {
		return $.timepicker.handleRange('timepicker', startTime, endTime, options);
	};

	/**
	 * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @return jQuery
	 */
	$.timepicker.datetimeRange = function(startTime, endTime, options) {
		$.timepicker.handleRange('datetimepicker', startTime, endTime, options);
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @return jQuery
	 */
	$.timepicker.dateRange = function(startTime, endTime, options) {
		$.timepicker.handleRange('datepicker', startTime, endTime, options);
	};

	/**
	 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
	 * enforce date range limits.
	 * @param  string method Can be used to specify the type of picker to be added
	 * @param  Element startTime
	 * @param  Element endTime
	 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
	 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
	 * @return jQuery
	 */
	$.timepicker.handleRange = function(method, startTime, endTime, options) {
		options = $.extend({}, {
			minInterval: 0, // min allowed interval in milliseconds
			maxInterval: 0, // max allowed interval in milliseconds
			start: {},      // options for start picker
			end: {}         // options for end picker
		}, options);

		$.fn[method].call(startTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates($(this), endTime);
			},
			onSelect: function(selectedDateTime) {
				selected($(this), endTime, 'minDate');
			}
		}, options, options.start));
		$.fn[method].call(endTime, $.extend({
			onClose: function(dateText, inst) {
				checkDates($(this), startTime);
			},
			onSelect: function(selectedDateTime) {
				selected($(this), startTime, 'maxDate');
			}
		}, options, options.end));

		checkDates(startTime, endTime);
		selected(startTime, endTime, 'minDate');
		selected(endTime, startTime, 'maxDate');

		function checkDates(changed, other) {
			var startdt = startTime[method]('getDate'),
				enddt = endTime[method]('getDate'),
				changeddt = changed[method]('getDate');

			if(startdt !== null){
				var minDate = new Date(startdt.getTime()),
					maxDate = new Date(startdt.getTime());

				minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);
				maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);

				if(options.minInterval &gt; 0 &amp;&amp; minDate &gt; enddt){ // minInterval check
					endTime[method]('setDate',minDate);
				}
				else if(options.maxInterval &gt; 0 &amp;&amp; maxDate &lt; enddt){ // max interval check
					endTime[method]('setDate',maxDate);
				}
				else if (startdt &gt; enddt) {
					other[method]('setDate',changeddt);
				}
			}
		}

		function selected(changed, other, option) {
			if (!changed.val()) {
				return;
			}
			var date = changed[method].call(changed, 'getDate');
			if(date !== null &amp;&amp; options.minInterval &gt; 0){
				if(option == 'minDate'){
					date.setMilliseconds(date.getMilliseconds() + options.minInterval); 
				}
				if(option == 'maxDate'){
					date.setMilliseconds(date.getMilliseconds() - options.minInterval);
				}
			}
			if (date.getTime) {
				other[method].call(other, 'option', option, date);
			}
		}
		return $([startTime.get(0), endTime.get(0)]);
	};

	/**
	 * Log error or data to the console during error or debugging
	 * @param  Object err pass any type object to log to the console during error or debugging
	 * @return void
	 */
	$.timepicker.log = function(err){
		if(window.console){
			console.log(err);
		}
	};

	/*
	* Microsecond support
	*/
	if(!Date.prototype.getMicroseconds){
		Date.prototype.microseconds = 0;
		Date.prototype.getMicroseconds = function(){ return this.microseconds; };
		Date.prototype.setMicroseconds = function(m){ 
			this.setMilliseconds(this.getMilliseconds() + Math.floor(m/1000));
			this.microseconds = m%1000;
			return this;
		};
	}

	/*
	* Keep up with the version
	*/
	$.timepicker.version = "1.3.1";

})(jQuery);
jQuery.noConflict();
});</code>
    </property>
    <property>
      <name>datetimepicker-js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>5a22e410-861a-40ea-886b-3c10fcb39636</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
function replaceAllString(oriStr, strTarget, strSubString ){
   var strText = oriStr;
   var intIndexOfMatch = strText.indexOf( strTarget );
   while (intIndexOfMatch != -1){
      strText = strText.replace( strTarget, strSubString )
      intIndexOfMatch = strText.indexOf( strTarget );
   }
   return( strText );
}
function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&amp;]" + name + "=([^&amp;#]*)"),
    results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};


   var jobName= getParameterByName('job')
   var fromDate = getParameterByName('fromDate')
   var toDate = getParameterByName('toDate')
   var limit= getParameterByName('limit')
   var selectedIstIid = getParameterByName('IstIid')
   var monitoringDays = getParameterByName('md')


  $("#jobname").ready(function(){
   $("#jobname").text(jobName)
   var convertedJobName = replaceAllString(jobName, ".", "_")
   convertedJobName = replaceAllString(convertedJobName, "@", "_")
   $("#IstIid" + convertedJobName).ready(function(){
     $("#IstIid" + convertedJobName).css("display","block")
     $("#select_" + convertedJobName).ready(function(){
        $("#select_" + convertedJobName).val(selectedIstIid)
     });
   });
 });

  $("#fromDate").ready(function(){
   $("#from-date").val(fromDate)
 });

  $("#toDate").ready(function(){
   $("#to-date").val(toDate)
 });

  $("#limit").ready(function(){
   if(limit!=""){
    $("#limit").val(limit)
   }
  
  $("#MonitoringDate").ready(function(){
     if(monitoringDays != null &amp;&amp; monitoringDays != ''){
       if(monitoringDays &gt; -1){
           $("#Monitor1Day").prop("checked", false)
           $("#Monitor3Day").prop("checked", false)
           $("#Monitor7Day").prop("checked", false)         
           $("#MonitorOtherDay").prop("checked", false)

           $("#Monitor" + monitoringDays + "day").prop("checked", true)
       }
     }else{
         $("#Monitor1Day").prop("checked", false)
         $("#Monitor3Day").prop("checked", false)
         $("#Monitor7Day").prop("checked", false)         
         $("#MonitorOtherDay").prop("checked", true)
     }
  })

  $("#exportBtn").ready(function(){
     if(jobName != null &amp;&amp; jobName != ''){
         $("#exportBtn").show()
     }else{
         $("#exportBtn").hide()
     }
  })

 });

 // Get data with ajax
 function ajax_getData(jobName,fromDate,toDate,limit ){
       var convertedJobName = replaceAllString(jobName, ".", "_")
       convertedJobName = replaceAllString(convertedJobName, "@", "_")
       var istIid = $("#select_" + convertedJobName).val()
       window.location="/xwiki/bin/view/WiperDog/MonitoringData?job="+jobName+"&amp;limit="+limit+"&amp;fromDate="+fromDate+"&amp;toDate="+toDate+"&amp;IstIid="+istIid+"&amp;md="+monitoringDays;

 }
	$("#treemenu2 a").click(function(){
		 var limit = 10
		 var fromDate=""
		 var toDate = ""
		 jobName= $(this).text()
                 $("#jobname").html(jobName)
                 var convertedJobName = replaceAllString(jobName, ".", "_")
                 convertedJobName = replaceAllString(convertedJobName, "@", "_")
                 $("#listIstIid &gt; div").css("display","none")
                 $("#IstIid" + convertedJobName).css("display","block")
		 //ajax_getData(jobName,fromDate,toDate,limit )

	});

	$("#from-date").datetimepicker({
		timeFormat: 'HH:mm:ss',
		dateFormat: 'yy-mm-dd',
	});
	$("#to-date").datetimepicker({
		timeFormat: 'HH:mm:ss',
			dateFormat: 'yy-mm-dd',

	});
	 $("#get-data").on("click",function(){
		var fromDate = $("#from-date").val()
		var toDate =  $("#to-date").val()
		 if( toDate!= "" ){
			  if(fromDate != ""){
				  if($("#from-date").datepicker( "getDate" ) &gt; $("#to-date").datepicker( "getDate" )){
				  alert("'From date' cannot start later than 'To date'")
				  return false
				  }
			  }
		 }
		 limit = $("#limit").val()
		 ajax_getData(jobName,fromDate,toDate,limit )
	});
$(document).ready(function(){

// ====================================================================================================================================

var listMonitoring = [$("#Monitor1day"), $("#Monitor3day"), $("#Monitor7day"), $("#MonitorOtherDay")]

$("#Monitor1day").click(function(){
	monitoringDays = 1;
	setCheckedRadio(this, true)
		
	var today = new Date()
	$("#to-date").val(today.toString('yyyy-MM-dd HH:mm:ss'))
	$("#from-date").val(today.addDays(-1).toString('yyyy-MM-dd HH:mm:ss'))

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('clip')
})

$("#Monitor3day").click(function(){
	monitoringDays = 3;
	setCheckedRadio(this, true)
		
	var today = new Date()
	$("#to-date").val(today.toString('yyyy-MM-dd HH:mm:ss'))
	$("#from-date").val(today.addDays(-3).toString('yyyy-MM-dd HH:mm:ss'))

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('blind')
})

$("#Monitor7day").click(function(){
	monitoringDays = 7;
	setCheckedRadio(this, true)

	var today = new Date()
	$("#to-date").val(today.toString('yyyy-MM-dd HH:mm:ss'))
	$("#from-date").val(today.addDays(-7).toString('yyyy-MM-dd HH:mm:ss'))
	

	//$("#FromToArea").hide('blind')
	$("#btnArea").show('blind')
})

$("#MonitorOtherDay").click(function(){
	monitoringDays = -1;
	setCheckedRadio(this, true)

	$("#to-date").val('')
	$("#from-date").val('')

	$("#FromToArea").show('blind')
	$("#btnArea").show('blind')
})

function setCheckedRadio(selector, state){
	for(var i = 0; i &lt; listMonitoring.length; i++){
		if(listMonitoring[i][0] != selector){
			listMonitoring[i].prop('checked', !state) 
		}
	}
}

$("#exportBtn").click(function(){
	var doc = new jsPDF('l');
	var livetableContent = $("#livetableJson").text() != '' ? JSON.parse($("#livetableJson").text()) : null
	var resultData = $("#resultData").text() != '' ? JSON.parse($("#resultData").text()) : null
	var result_KEYEXPR = resultData[0] != null ? resultData[0].KEYEXPR : null
	var result_KEYEXPR_unit = result_KEYEXPR != null ? result_KEYEXPR._unit : null
	var jobName = getParameterByName('job')
	var headers = []
	var headersAlias = {}
	var isStored = true
	var mapHeaderSubtyped = {}
	var listKeys = []
		
	// Report's title
	doc.setFontSize(20)
	doc.text(jobName, 5, 10)
	doc.setFontSize(10)
	doc.text("From: " + fromDate, 5, 15)
	doc.text("To: " + toDate, 80, 15)

	if(result_KEYEXPR != null){
		if(keys != null &amp;&amp; keys != "[ ]"){
			// Subtyped job
			isStored = false
			var tmpListKeys = keys.split(',')
			for(var i = 0; i &lt; tmpListKeys.length; i++){
				var key = replaceAllString(tmpListKeys[i], '\"', '').trim()
				listKeys.push(key)
			}
			for(var kIdx = 0; kIdx &lt; listKeys.length; kIdx++){
				var key = listKeys[kIdx]
				var result_KEYEXPR_sequence = result_KEYEXPR._sequence[key]
				var headersOfKey = getHeadersForTable(result_KEYEXPR_sequence, result_KEYEXPR_unit)
				mapHeaderSubtyped[key] = headersOfKey
			}
		}else{
			// Stored job
			// Get headers
			var result_KEYEXPR_sequence = result_KEYEXPR._sequence
			headers = getHeadersForTable(result_KEYEXPR_sequence, result_KEYEXPR_unit)
		}
	}
	if(resultData != null){
		// List data
		var listData = []
		if(isStored){
			// Headers Alias
			headersAlias = getHeaderAliasForTable(headers, result_KEYEXPR_unit)
			for(var i = resultData.length - 1; i &gt;= 0; i--){
				var data = resultData[i]
				var fetchAt = data.fetchAt
				// Need a dataWrapper because data now is a 1 member-list
				var dataWrapper = data.data[0]
				
				// KEYEXPR doesn't contain all column name -&gt; We add missing column into headers
				for(var dataCol in dataWrapper){
					if(dataWrapper.hasOwnProperty(dataCol) &amp;&amp; dataCol != 'RECORD_SEQ' &amp;&amp; headers.indexOf(dataCol) == -1){
						headers.push(dataCol)
					}
				}

				for(var j = 0; j &lt; data.data.length; j++){
					var tmpData = data.data[j]
					tmpData['fetchAt'] = fetchAt
					listData.push(tmpData)
				}	
			
			}
			headers = genTableHeaders(doc, headers, listData, headersAlias)
			
			doc.setFontSize(20)
			doc.text("Statistic Data", 5, 25)
		
			genTablePDF(doc, listData, headers, headersAlias, true, 5, 30, 4)
			//savePDF(doc, 'uri','datauri')
		}else{
			// Draw a number of tables so we need a variable that mark where table ends
			var lastY = 5
			// X tables with x headers : x headersAliases 
			for(headersArrayKey in mapHeaderSubtyped){
				if(mapHeaderSubtyped.hasOwnProperty(headersArrayKey)){
					listData = []
					headers = mapHeaderSubtyped[headersArrayKey]
					headersAlias = getHeaderAliasForTable(headers, result_KEYEXPR_unit)
					var dataForKey = resultData[0]['data'][headersArrayKey]
					for(var i = dataForKey.length - 1; i &gt;= 0; i--){
						var data = dataForKey[i]
						
						// KEYEXPR doesn't contain all column name -&gt; We add missing column into headers
						for(var dataCol in data){
							if(data.hasOwnProperty(dataCol) &amp;&amp; dataCol != 'RECORD_SEQ' &amp;&amp; headers.indexOf(dataCol) == -1){
								headers.push(dataCol)
							}
						}
					}

					for(var i = 0; i &lt; resultData.length; i++){
						var fetchAt = resultData[i].fetchAt
						var tmpLstData = resultData[i].data[headersArrayKey]
						for(var j = 0; j &lt; tmpLstData.length; j++){
							var data = tmpLstData[j]
							data['fetchAt'] = fetchAt
							listData.push(data)
						}
					}

					headers = genTableHeaders(doc, headers, listData, headersAlias)
					
					doc.setFontSize(20)
					doc.text("Statistic Data for " + headersArrayKey, 5, lastY + 20)
					
					lastY = genTablePDF(doc, listData, headers, headersAlias, true, 5, lastY + 25, 4)
					if(lastY + 20 &gt;= doc.internal.pageSize.height){
						doc.addPage()
					}
				}
			}
			//savePDF(doc, 'uri', jobName)
		}
	}
	savePDF(doc, 'file', jobName + "." + selectedIstIid + ' data.pdf')
	doc = new jsPDF('p');
	// Chart
	exportChart(doc, listKeys, jobName)
})
	
function getHeadersForTable(sequence, unit){
	var headers = []
	if(sequence != null &amp;&amp; sequence.length &gt; 0){
		// Must have fetchAt
		headers.push("fetchAt")
		// High priority _sequence
		for(var i = 0; i &lt; sequence.length; i++){
			headers.push(sequence[i])
		}
		// Add remain columns
		for(var key in unit){
			if(unit.hasOwnProperty(key)){
				if(!(headers.indexOf(key) &gt; -1)){
					headers.push(key)
				}
			}
		}
	}
	return headers
}

function getHeaderAliasForTable(headers, unit){
	var headersAlias = {}
	if(unit != null){
		for(var hIdx = 0; hIdx &lt; headers.length; hIdx++){
			var header = headers[hIdx]
			var u = unit[header]
			if(u != null){
				headersAlias[header] = header + "(" + u + ")"
			}
		}
	}
	return headersAlias
}

function exportChart(doc, listKeys, jobName){
	var isPrint = false;
	var listContainerLine
	var listContainerPie
	var listContainerArea
	var listContainerBar
	var lastY = 20
	doc.text(jobName, 5, 8)
	if(listKeys.length &gt; 0){
		// Subtyped		
		for(var i = 0; i &lt; listKeys.length; i++){
			var key = listKeys[i]
			doc.text('Charts Of ' + key, 5, lastY - 2)
			listContainerLine = $("#jsons&gt;.lstcontainerline" + "_" + key).val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerline" + "_" + key).val()) : null
			listContainerPie = $("#jsons&gt;.lstcontainerpie" + "_" + key).val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerpie" + "_" + key).val()) : null
			listContainerArea = $("#jsons&gt;.lstcontainerarea" + "_" + key).val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerarea" + "_" + key).val()) : null
			listContainerBar = $("#jsons&gt;.lstcontainerbar" + "_" + key).val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerbar" + "_" + key).val()) : null
			
			// Draw Pie chart
			if(listContainerPie != null){
				isPrint = true;
				var containerArray = []
				for(var j = 0; j &lt; listContainerPie.length; j++){
					for(var g = 0; g &lt; listContainerPie[j].length; g++){
						var container = "container" + key + "_" + listContainerPie[j][g]
						containerArray.push(container)
					}
				}
				var tmpArray = []
				for(var g = 0; g &lt; containerArray.length; g++){
					tmpArray.push(containerArray[g])
					if(tmpArray.length == 2 || g == containerArray.length - 1){
						lastY = drawListChartAtPDF(doc, tmpArray, lastY)
						tmpArray = []
					}
				}
			}
			
			// Draw Line charts
			if(listContainerLine != null){
				isPrint = true;
				for(var j = 0; j &lt; listContainerLine.length; j++){
					var container = "containerline" + key + "_" + listContainerLine[j]
					lastY = drawChartAtPDF(doc, container, lastY)
				}
			}
			// Draw Bar charts
			if(listContainerBar != null){
				isPrint = true;
				for(var j = 0; j &lt; listContainerBar.length; j++){
					for(var g = 0; g &lt; listContainerBar[j].length; g++){
						var container = "containerbar" + key + "_" + j + "_" + listContainerBar[j][g]
						lastY = drawChartAtPDF(doc, container, lastY)
					}
				}
			}
			// Draw Area charts
			if(listContainerArea != null){
				isPrint = true;
				for(var j = 0; j &lt; listContainerArea.length; j++){
					for(var g = 0; g &lt; listContainerArea[j].length; g++){
						var container = "containerarea" + key + "_" + j + "_" + listContainerArea[j][g]
						lastY = drawChartAtPDF(doc, container, lastY)
					}
				}
			}
			if(i &lt; listKeys.length -1){
				doc.addPage()
				lastY = 10
			}
		}
	}else{
		// Store
		listContainerLine = $("#jsons&gt;.lstcontainerline").val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerline").val()) : null
		listContainerPie = $("#jsons&gt;.lstcontainerpie").val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerpie").val()) : null
		listContainerArea = $("#jsons&gt;.lstcontainerarea").val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerarea").val()) : null
		listContainerBar = $("#jsons&gt;.lstcontainerbar").val() != null ? jQuery.parseJSON($("#jsons&gt;.lstcontainerbar").val()) : null

		// Draw Pie charts
		if(listContainerPie != null){
			isPrint = true;
			var containerArray = []
			for(var i = 0; i &lt; listContainerPie.length; i++){
				var container = "container" + i + "_" + "pie"
				containerArray.push(container)
			}
			var tmpArray = []
			for(var g = 0; g &lt; containerArray.length; g++){
				tmpArray.push(containerArray[g])
				if(tmpArray.length == 2 || g == containerArray.length - 1){
					lastY = drawListChartAtPDF(doc, tmpArray, lastY)
					tmpArray = []
				}
			}
		}

		// Draw Line charts
		if(listContainerLine != null){
			isPrint = true;
			for(var i = 0; i &lt; listContainerLine.length; i++){
				var container = "containerline_" + listContainerLine[i]
				lastY = drawChartAtPDF(doc, container, lastY)
			}
		}

		// Draw Bar charts
		if(listContainerBar != null){
			isPrint = true;
			for(var i = 0; i &lt; listContainerBar.length; i++){
				for(var j = 0; j &lt; listContainerBar[i].length; j++){
					var container = "containerbar" + i + "_" + listContainerBar[i][j]
					lastY = drawChartAtPDF(doc, container, lastY)
				}
			}
		}

		// Draw Area charts
		if(listContainerArea != null){
			isPrint = true;
			for(var i = 0; i &lt; listContainerArea.length; i++){
				for(var j = 0; j &lt; listContainerArea[i].length; j++){
					var container = "containerarea" + i + "_" + listContainerArea[i][j]
					lastY = drawChartAtPDF(doc, container, lastY)
				}
			}
		}
	}
	//savePDF(doc, 'uri', jobName )
	if(isPrint){
		savePDF(doc, 'file', jobName + "." + selectedIstIid + ' charts.pdf')
	}
}

function drawChartAtPDF(doc, container, lastY){
	var canvas = getCanvas(document.getElementById(container))
	var canvasWidth = canvas.getAttribute('width')
	var canvasHeight = canvas.getAttribute('height')
	var data = canvas.toDataURL('image/jpeg').slice('data:image/jpeg;base64,'.length);
	data = atob(data)
	document.body.removeChild(canvas);
	var imageWidth = doc.internal.pageSize.width - 20
	var imageHeight = imageWidth * (canvasHeight / canvasWidth)
	// Check if we should add new page or not
	if(doc.internal.pageSize.height &lt;= lastY + imageHeight){
		doc.addPage()
		lastY = 0
	}
	doc.addImage(data, 'JPEG', 10, lastY, imageWidth, imageHeight)
	lastY += imageHeight + 10
	return lastY
}

function drawListChartAtPDF(doc, lstContainer, lastY){
	var width = doc.internal.pageSize.width/lstContainer.length
	for(var i = 0; i &lt; lstContainer.length; i++){
		var canvas = getCanvas(document.getElementById(lstContainer[i]))
		var canvasWidth = canvas.getAttribute('width')
		var canvasHeight = canvas.getAttribute('height')
		var data = canvas.toDataURL('image/jpeg').slice('data:image/jpeg;base64,'.length);
		data = atob(data)
		document.body.removeChild(canvas);
		var imageWidth = width
		var imageHeight = imageWidth * (canvasHeight / canvasWidth)
		// Check if we should add new page or not
		if(doc.internal.pageSize.height &lt;= lastY + imageHeight){
			doc.addPage()
			lastY = 0
		}
		doc.addImage(data, 'JPEG', i*width, lastY, imageWidth, imageHeight)
	}
	lastY += imageHeight + 10
	return lastY
}

// ====================================================================================================================================

$(".wikimodel-emptyline").remove()
  $("#xwikicontent").find('p').each(function(){
     $(this).children('br').remove()
     $(this).html($(this).html().replace(/&amp;nbsp;/g, ''));
})
$("#toggleJobSelect").unbind('click')
$("#toggleJobSelect").click(function(){
  $("#nav").toggle('slow')
  $("#viewer").toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Hide job selection")

  } else {
     $(this).attr('id','show')
     $(this).text("Show job selection")
  }

})

$(".togglePie").click(function(){
  $(this).parents("#pieChart").children('#wrapperPieChart').toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show pie charts")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide pie charts")
  }

})
$(".toggleLine").click(function(){
  $(this).parents("#lineChart").children('#wrapperLineChart').toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show line charts")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide line charts")
  }
})
$(".toggleBar").click(function(){
  $(this).parents("#barChart").children('#wrapperBarChart').toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show bar charts")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide bar charts")
  }
})
$(".toggleArea").click(function(){
  $(this).parents("#areaChart").children('#wrapperAreaChart').toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show area charts")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide area charts")
  }
})
$(".allChart").click(function(){
  $(this).parents("#chartContainer").children('#pieChart').toggle('slow')
  $(this).parents("#chartContainer").children('#lineChart').toggle('slow')
  $(this).parents("#chartContainer").children('#barChart').toggle('slow')
  $(this).parents("#chartContainer").children('#areaChart').toggle('slow')
  console.log($(this).attr('id'))
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show all charts")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide all charts")
  }

})
$(".toggleLiveTableContainer").click(function(){
  $(this).parents(".liveTableContainer").children('.liveTable').toggle('slow')
  if($(this).attr('id') == 'show'){
     $(this).attr('id','hide')
     $(this).text("Show data table")
  } else {
     $(this).attr('id','show')
     $(this).text("Hide data table")
  }
})
  var keys = $("#lstkey").text()
  var jsonObj
  if($("#livetableJson").text() != null &amp;&amp; $("#livetableJson").text() != "") {
    jsonObj = $.parseJSON($("#livetableJson").text()); 
  }
  if(keys &amp;&amp; keys != '[ ]'){
    /** Subtyped **/    
    var newKeys = keys.replace('[',"");
    keys = newKeys.replace(']',"");
    var keyArr = (keys.indexOf(',') != -1)? keys.split(','):new Array(keys);
    //console.log('Key after replace: '+keys)       
    for(var i=0;i&lt;keyArr.length;i++){
        var keyName = keyArr[i].trim().replace('',"").replace("\"","").replace('\"','');
        var subTypeJsonObjStr = jsonObj[keyName].replace('#livetablePager','#livetablePager_'+keyName)
        var subTypeJsonObj = $.parseJSON(subTypeJsonObjStr);
       
        $("#livetableList_"+keyName).jqGrid(subTypeJsonObj);
        $("#livetableList_"+keyName).jqGrid('navGrid', "#livetablePager_"+keyName, {
           edit : false,
           add : false,
           del : false,
           search:false
         });
         
    }
    
  }else{ /** Store**/        
      $("#livetableList").jqGrid(jsonObj);
      $("#livetableList").jqGrid('navGrid', "#livetablePager", {
           edit : false,
           add : false,
           del : false,
           search:false
           
       });
       
   }
  $(function(){
                $('div.livetblContentClass').css({'width':'98%'});
   		$('div.ui-state-default.ui-jqgrid-hdiv').css({'width':'100%'});
   		$('div.ui-jqgrid-bdiv').css({'width':'100%'});
   		$('div.ui-pg-table').css({'width':'100%'});
   		$('div.ui-jqgrid.ui-widget.ui-widget-content.ui-corner-all').css({'width':'100%'});
   		$('div.ui-jqgrid-view').css({'width':'100%'});
                $('div.ui-state-default.ui-jqgrid-pager.ui-corner-bottom').css({'width':'100%'});
	});
   
});
        
jQuery.noConflict()
});</code>
    </property>
    <property>
      <name>process</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d60dd870-be62-4f8a-8c77-a62c7472146a</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>require(['jquery'],function($){
	$(function () {
		//call function draw chart
		$(document ).ready(function(){
		    //get list key of data draw chart and parse to Json
                    if($("#lstkey").val() != null &amp;&amp; $("#lstkey").val() != []) {
			var lstKey = jQuery.parseJSON($("#lstkey").val())
			//call function draw all line chart
			drawAllLineChart(lstKey)
			//call function draw all bar chart
			drawAllBarChart(lstKey)
			//call function draw all pie chart
			drawAllPieChart(lstKey)
			//call function draw all area chart
			drawAllAreaChart(lstKey)
                    }
		})

		/**
		* Function to draw all Line Chart with data in textarea jsonline and fill to textarea lstcontainerline
		* @param lstKey list key of data line
		*/
		function drawAllLineChart(lstKey){
			var title
			var arrayAll
			var arrayContainerAll
			//check data Subtype or Store
			if(lstKey.length &gt; 0) {
				//data Subtype
				for(var eKey=0;eKey&lt;lstKey.length;eKey++){
					var finalKey = lstKey[eKey]
					//for each key of list Key =&gt; check data json line
					if(($("#jsons&gt;#jsonline_" + finalKey)).length &gt; 0) {
						//get data line respective and parse to Json
						arrayAll = jQuery.parseJSON($("#jsons&gt;#jsonline_" + finalKey).val());
						//get data container line respective and parse to Json
						arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerline_" + finalKey).val());
						var lstContainer = [];
						var data_all = [];
						//get size of data line
						var chartSize = arrayAll.length
						//for each data of data line
						for(var i=0;i&lt;chartSize ;i++){
							//set data for draw chart
							data_all = arrayAll[i]
							//set list container
							lstContainer = arrayContainerAll[i]
							//check data and list container for draw chart
							if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
								// data to display on tooltip
								var data_detail = data_all[0]
								// draw Line chart
								for(var j=0;j&lt;data_all.length;j++){
									if(data_all[j].series[0].name == null){
										data_all[j].series[0].name = lstContainer[j]
									}
									chartName = data_all[j].chart_name
									title = data_all[j].title
									//call to function draw chart
									drawLineChart(data_all[j].xAxis, data_all[j].series, finalKey + "_" + data_all[j].chart_name, data_all[j].detail_data, title)
								}
							}
						}
					}
				}
			} else {
				//get data Store and parse to json
				arrayAll = jQuery.parseJSON($("#jsons&gt;.jsonline").val());
				//check data store != null and != []
				if(arrayAll != null &amp;&amp; arrayAll != []) {
					//get data line respective and parse to Json 
					arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerline").val());
					var lstContainer = [];
					var data_all = [];
					//get size of data line
					var chartSize = arrayAll.length
					//for each data of data line
					for(var i=0;i&lt;chartSize ;i++){
						//set data for draw chart
						data_all = arrayAll[i]
						//set list container
						lstContainer = arrayContainerAll[i]
						//check data and list container for draw chart
						if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
							// data to display on tooltip
							var data_detail = data_all[0]
							// draw Line chart
							for(var j=0;j&lt;data_all.length;j++){
								if(data_all[j].series[0].name == null){
									data_all[j].series[0].name = lstContainer[j]
								}
								chartName = data_all[j].chart_name
								title = data_all[j].title
								//call to function draw chart
								drawLineChart(data_all[j].xAxis, data_all[j].series, "_" + chartName, data_all[j].detail_data, title)
							}
						}
					}
				}
			}
		}

		/**
		* Function to draw all Bar Chart with data in textarea jsonbar and fill to textarea lstcontainerbar
		* @param lstKey list key of data bar
		*/
		function drawAllBarChart(lstKey){
			var chartName
			var arrayAll
			var arrayContainerAll
			//check data Subtype or Store
			if(lstKey.length &gt; 0) {
				//data Subtype
				for(var eKey=0;eKey&lt;lstKey.length;eKey++){
					var finalKey = lstKey[eKey]
					//for each key of list Key =&gt; check data json bar
					if(($("#jsons&gt;#jsonbar_" + finalKey)).length &gt; 0) {
						//get data bar respective and parse to Json
						arrayAll = jQuery.parseJSON($("#jsons&gt;#jsonbar_" + finalKey).val());
						//get data container bar respective and parse to Json
						arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerbar_" + finalKey).val());
						var lstContainer = [];
						var data_all = [];
						//get size of data bar
						var chartSize = arrayAll.length
						//for each data of data bar
						for(var i=0;i&lt;chartSize ;i++){
							//set data for draw chart
							data_all = arrayAll[i]
							//set list container
							lstContainer = arrayContainerAll[i]
							//check data and list container for draw chart
							if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
								// data to display on tooltip
								var data_detail = data_all[0]
								// draw bar chart
								for(var j=0;j&lt;data_all.length;j++){
									if(data_all[j].series[0].name == null){
										data_all[j].series[0].name = lstContainer[j]
									}
									chartName = data_all[j].chart_name + " ( " + data_all[j].chart_columns[j] + " )"
									//call to function draw chart
									drawBarChart(data_all[j].xAxis, data_all[j].series, finalKey + "_" + i + "_" + lstContainer[j], data_all[j].detail_data, chartName)
								}
							}
						}
					}
				}
			} else {
				//get data Store and parse to json
				arrayAll = jQuery.parseJSON($("#jsons&gt;.jsonbar").val());
				//check data store != null and != []
				if(arrayAll != null &amp;&amp; arrayAll != []) {
					//get data bar respective and parse to Json 
					arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerbar").val());
					var lstContainer = [];
					var data_all = [];
					//get size of data bar
					var chartSize = arrayAll.length
					//for each data of data bar
					for(var i=0;i&lt;chartSize;i++){
						//set data for draw chart
						data_all = arrayAll[i]
						//set list container
						lstContainer = arrayContainerAll[i]
						//check data and list container for draw chart
						if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
							// data to display on tooltip
							var data_detail = data_all[0]
							// draw Bar chart
							for(var j=0;j&lt;data_all.length;j++){
								if(data_all[j].series[0].name == null){
									data_all[j].series[0].name = lstContainer[j]
								}
								chartName = data_all[j].chart_name + " ( " + data_all[j].chart_columns[j] + " )"
								//call to function draw chart
								drawBarChart(data_all[j].xAxis, data_all[j].series, i + "_" + lstContainer[j], data_all[j].detail_data, chartName)
							}
						}
					}
				}
			}
		}

		/**
		* Function to draw all Pie Chart with data in textarea jsonpie and fill to textarea lstcontainerpie
		* @param lstKey list key of data pie
		*/
		function drawAllPieChart(lstKey){
			var chartName
			var arrayAll
			var arrayContainerAll
			//check data Subtype or Store
			if(lstKey.length &gt; 0) {
				//data Subtype
				for(var eKey=0;eKey&lt;lstKey.length;eKey++){
					var finalKey = lstKey[eKey]
					//for each key of list Key =&gt; check data json pie
					if(($("#jsons&gt;#jsonpie_" + finalKey)).length &gt; 0) {
						//get data pie respective and parse to Json
						arrayAll = jQuery.parseJSON($("#jsons&gt;#jsonpie_" + finalKey).val());
						//get data container pie respective and parse to Json
						arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerpie_" + finalKey).val());
						var lstContainer = [];
						var data_all = [];
						//get size of data pie
						var chartSize = arrayAll.length
						//for each data of data pie
						for(var i=0;i&lt;chartSize ;i++){
							//set data for draw chart
							data_all = arrayAll[i]
							//set list container
							lstContainer = arrayContainerAll[i]
							//check data and list container for draw chart
							if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
								// draw Pie chart
								for(var j=0;j&lt;data_all.length;j++){
									chartName  = data_all[j].chart_name + "( " + data_all[j].name + " )"
									//call to function draw chart
									drawPieChart([data_all[j]], finalKey + "_" + lstContainer[j], chartName, data_all[j].unit)
								}
							}
						}
					}
				}
			} else {
				//get data Store and parse to json
				var arrayAll = jQuery.parseJSON($("#jsons&gt;.jsonpie").val());
				//check data store != null and != []
				if(arrayAll != null &amp;&amp; arrayAll != []) {
					//get data pie respective and parse to Json 
					var arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerpie").val());
					var lstContainer = [];
					var data_all = [];
					//get size of data pie
					var chartSize = arrayAll.length
					var chartNum = 0
					//for each data of data pie
					for(var i=0;i&lt;chartSize ;i++){
						//set data for draw chart
						data_all = arrayAll[i]
						//set list container
						lstContainer = arrayContainerAll[i]
						//check data and list container for draw chart
						if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
							// draw Pie chart
							for(var j=0;j&lt;data_all.length;j++){
								if (data_all[j].name != data_all[j].chart_name) {
									chartName  = data_all[j].chart_name + "( " + data_all[j].name + " )"
								} else {
									chartName  = data_all[j].chart_name
								}
								//call to function draw chart
								drawPieChart([data_all[j]], chartNum + "_pie", chartName, data_all[j].unit)
								chartNum++
							}
						}
					}
				}
			}
		}

		/**
		* Function to draw all Area Chart with data in textarea jsonarea and fill to textarea lstcontainerarea
		* @param lstKey list key of data area
		*/
		function drawAllAreaChart(lstKey){
			var chartName
			var arrayAll
			var arrayContainerAll
			//check data Subtype or Store
			if(lstKey.length &gt; 0) {
				//data Subtype
				for(var eKey=0;eKey&lt;lstKey.length;eKey++){
					var finalKey = lstKey[eKey]
					//for each key of list Key =&gt; check data json area
					if(($("#jsons&gt;#jsonarea_" + finalKey)).length &gt; 0) {
						//get data area respective and parse to Json
						arrayAll = jQuery.parseJSON($("#jsons&gt;#jsonarea_" + finalKey).val());
						//get data container area respective and parse to Json
						arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerarea_" + finalKey).val());
						var lstContainer = [];
						var data_all = [];
						//get size of data area
						var chartSize = arrayAll.length
						//for each data of data area
						for(var i=0;i&lt;chartSize ;i++){
							//set data for draw chart
							data_all = arrayAll[i]
							//set list container
							lstContainer = arrayContainerAll[i]
							//check data and list container for draw chart
							if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
								// data to display on tooltip
								var data_detail = data_all[0]
								// draw Line chart
								for(var j=0;j&lt;data_all.length;j++){
									if(data_all[j].series[0].name == null){
										data_all[j].series[0].name = lstContainer[j]
									}
									chartName = data_all[j].chart_name
									var unit = ""
									if (data_all[j].unit != null){
										unit = "(" + data_all[j].unit + ")"
									}
									//call to function draw chart
									drawAreaChart(data_all[j].xAxis, data_all[j].series, finalKey + "_" + i + "_" + lstContainer[j], unit, chartName)
								}
							}
						}
					}
				}
			} else {
				//get data Store and parse to json
				arrayAll = jQuery.parseJSON($("#jsons&gt;.jsonarea").val());
				//check data store != null and != []
				if(arrayAll != null &amp;&amp; arrayAll != []) {
					//get data area respective and parse to Json 
					arrayContainerAll = jQuery.parseJSON($("#jsons&gt;.lstcontainerarea").val());
					var lstContainer = [];
					var data_all = [];
					//get size of data area
					var chartSize = arrayAll.length
					//for each data of data area
					for(var i=0;i&lt;chartSize ;i++){
						//set data for draw chart
						data_all = arrayAll[i]
						//set list container
						lstContainer = arrayContainerAll[i]
						//check data and list container for draw chart
						if(data_all.length &gt;0 &amp;&amp; lstContainer.length &gt;0){
							// data to display on tooltip
							var data_detail = data_all[0]
							// draw area chart
							for(var j=0;j&lt;data_all.length;j++){
								if(data_all[j].series[0].name == null){
									data_all[j].series[0].name = lstContainer[j]
								}
								chartName = data_all[j].chart_name
								var unit = ""
								if (data_all[j].unit != null){
									unit = "(" + data_all[j].unit + ")"
								}
								//call to function draw chart
								drawAreaChart(data_all[j].xAxis, data_all[j].series, i + "_" + lstContainer[j], unit, chartName)
							}
						}
					}
				}
			}
		}

		/**
		* Function to draw Line Chart
		* @param xAxis location for label of line chart
		* @param series name for each line chart
		* @param container key for each chart
		* @param data_detail data for draw chart
		* @param chart_name name of line chart
		* @return line chart
		*/
		function drawLineChart(xAxis, series, container, data_detail, chart_name){
            		var windowSize = document.getElementById('mainContentArea').clientWidth
           		xAxis['labels'] = {'rotation': -75, 'align':'right'}
            		xAxis['labels']['style'] = {font: 'normal 10px Arial, sans-serif', color: 'black'}
			var dataXAxis = xAxis
            		var widthChart = dataXAxis.categories.length*20
            		$('.displayBlockLine').css('width', windowSize)
            		$('.displayBlockLine').css('overflow', 'scroll')
            		$('.displayBlockLine').css('margin-bottom', 2)
            		if(widthChart &lt;= windowSize) {
                		widthChart = windowSize
            		}
			var dataSeries = series
			var detail = data_detail
            		//Build the chart
			$('#containerline' + container).highcharts({
				chart: {
					type:'line',
                    			width: widthChart,
                    			height: 400
				},
				title: {
					text: chart_name
				},
				tooltip :{
					formatter: function() {
						var index = 0
						var tooltip_str = ""
						var name = this.series.name
						var fetchAt = this.x
						//get data tooltip of chart from detail data
						for(var i=0;i&lt;detail.length;i++){
							if(detail[i].name == null || detail[i].name == name){
								for(var j=0;j&lt;detail[i].data.length;j++){
							             var detail_data = detail[i].data
                                                                     if(detail_data[j] != null){
									  if(fetchAt == detail_data[j].fetchAt){
										for(var k in detail_data[j]){
											if(k != "fetchAt") {
												tooltip_str += "&lt;p&gt;" + k + " : " + detail_data[j][k] + "&lt;/p&gt;&lt;br&gt;"
											}
										}
									  }
                                                                     }
								}
							}
						}
						return tooltip_str
					}
				},
				xAxis: dataXAxis ,
				yAxis: {
					title: {
						text: 'Monitoring'
					}
				},
				series: dataSeries
			});
		}

		/**
		* Function to draw Bar Chart
		* @param xAxis location for label of bar chart
		* @param series name for each bar chart
		* @param container key for each chart
		* @param data_detail data for draw chart
		* @param chart_name name of bar chart
		* @return bar chart
		*/
		function drawBarChart(xAxis, series, container, data_detail, chart_name){
            		var windowSize = document.getElementById('xwikicontent').clientWidth
            		xAxis['labels'] = {'rotation': -75, 'align':'right'}
            		xAxis['labels']['style'] = {font: 'normal 10px Arial, sans-serif', color: 'black'}
			var dataXAxis = xAxis
            		var widthChart = dataXAxis.categories.length*20
            		$('.displayBlockBar').css('width', windowSize)
            		$('.displayBlockBar').css('margin-bottom', 2)
            		if(widthChart &lt;= windowSize) {
                    		widthChart = windowSize
                    		$('.displayBlockBar').css('overflow', 'hidden')
            		} else {
                    		$('.displayBlockBar').css('overflow', 'scroll')
            		}
			var dataSeries = series
			var detail = data_detail
            		//Build the chart
			$('#containerbar' + container).highcharts({
				chart: {
					type: 'column',
                    			width: widthChart,
                    			height: 400
				},
				title: {
					text: chart_name
				},
				xAxis: dataXAxis,
				yAxis: {
					title: {
						text: 'Monitoring'
					}
				},
				tooltip: {
					formatter: function() {
						var index = 0
						var tooltip_str = ""
						var name = this.series.name
						var fetchAt = this.x
	                    			//get data tooltip of chart from detail data
						for(var i=0;i&lt;detail.length;i++){
							if(detail[i].name == null || detail[i].name == name){
								for(var j=0;j&lt;detail[i].data.length;j++){
								     var detail_data = detail[i].data
                                                                     if(detail_data[j] != null){
									  if(fetchAt == detail_data[j].fetchAt){
										for(var k in detail_data[j]){
											if(k != "fetchAt") {
												tooltip_str += "&lt;p&gt;" + k + " : " + detail_data[j][k] + "&lt;/p&gt;&lt;br&gt;"
											}
										}
									  }
                                                                     }
								}
							}
						}
						return tooltip_str
					}
				},
				plotOptions: {
					column: {
						pointPadding: 0.2,
						borderWidth: 0
					}
				},
				series: dataSeries
			});
		}

		/**
		* Function to draw Pie Chart
		* @param data data for draw chart
		* @param container key for each chart
		* @param chartName name of pie chart
		* @param unit unit for each value of data chart
		* @return pie chart
		*/
		function drawPieChart(data, container, chartName, unit){
			var dataPie = data
			$(document).ready(function () {
				// Build the chart
				$('#container' + container).highcharts({
					chart: {
						plotBackgroundColor: null,
						plotBorderWidth: null,
						plotShadow: false
					},
					title: {
						text: chartName
					},
					tooltip: {
						pointFormat: '&lt;b&gt;{point.y} ' + unit + ' &lt;/b&gt;'
					},
					plotOptions: {
						pie: {
							allowPointSelect: true,
							cursor: 'pointer',
							dataLabels: {
								enabled: true,
                                				color: '#000000',
                                				connectorColor: '#000000',
                                				format: '&lt;b&gt;{point.name}&lt;/b&gt;: {point.percentage:.1f} %'
							},
							showInLegend: true
						}
					},
					series: dataPie
				});
			});
		}

		/**
		* Function to draw Area Chart
		* @param xAxis location for label of area chart
		* @param series name for each area chart
		* @param container key for each chart
		* @param data_detail data for draw chart
		* @param chart_name name of area chart
		* @return area chart
		*/
		function drawAreaChart(xAxis, series, container, unit, chart_name){
            		var windowSize = document.getElementById('xwikicontent').clientWidth
            		xAxis['labels'] = {'rotation': -75, 'align':'right'}
            		xAxis['labels']['style'] = {font: 'normal 10px Arial, sans-serif', color: 'black'}
			var dataXAxis = xAxis
               	 	var widthChart = dataXAxis.categories.length*20
                	$('.displayBlockArea').css('width', windowSize)
                	$('.displayBlockArea').css('margin-bottom', 2)
                	if(widthChart &lt;= windowSize) {
                        	widthChart = windowSize
                        	$('.displayBlockArea').css('overflow', 'hidden')
                	} else {
                        	$('.displayBlockArea').css('overflow', 'scroll')
               		}
			var dataSeries = series
            		//Build the chart
			$('#containerarea' + container).highcharts({
				chart: {
					type: 'area',
                    			width: widthChart,
                    			height: 400
				},
				title: {
					text: chart_name
				},
				subtitle: {
				},
				xAxis: dataXAxis,
				yAxis: {
					title: {
						text: 'Monitoring By Wiperdog'
					},
					labels: {
						formatter: function() {
							return this.value;
						}
					}
				},
                		tooltip: {
                        		shared: true,
                        		valueSuffix: unit
                		},
				plotOptions: {
					area: {
						stacking: 'normal',
						lineColor: '#666666',
						lineWidth: 1,
						marker: {
							lineWidth: 1,
							lineColor: '#666666'
						}
					}
				},
				series: dataSeries
			});
		};

	});
	jQuery.noConflict()
});</code>
    </property>
    <property>
      <name>drawChart-js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>371ec24a-0185-4fe1-b83f-7e317a8dbf60</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i&lt;n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&amp;&amp;(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&amp;&amp;!isNaN(date)){return(this&gt;date)?1:(this&lt;date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t&gt;=start.getTime()&amp;&amp;t&lt;=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value&lt;min||value&gt;max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&amp;&amp;x.millisecond!==0){x.millisecond=-1;}
if(!x.second&amp;&amp;x.second!==0){x.second=-1;}
if(!x.minute&amp;&amp;x.minute!==0){x.minute=-1;}
if(!x.hour&amp;&amp;x.hour!==0){x.hour=-1;}
if(!x.day&amp;&amp;x.day!==0){x.day=-1;}
if(!x.month&amp;&amp;x.month!==0){x.month=-1;}
if(!x.year&amp;&amp;x.year!==0){x.year=-1;}
if(x.millisecond!=-1&amp;&amp;Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&amp;&amp;Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&amp;&amp;Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&amp;&amp;Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&amp;&amp;Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&amp;&amp;Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&amp;&amp;Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&amp;&amp;(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n&lt;0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()&lt;13?self.getHours():(self.getHours()-12));case"h":return self.getHours()&lt;13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()&lt;12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()&lt;12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i&lt;dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j&lt;mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k&lt;px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i&lt;px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i&lt;px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i&lt;px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i&lt;px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length&gt;0&amp;&amp;!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&amp;&amp;q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j&lt;px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length&gt;0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length&lt;best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length&lt;min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length&gt;1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i&lt;px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i&lt;gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j&lt;vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i&lt;ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length&gt;2)?n:(n+(((n+2000)&lt;Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i&lt;x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&amp;&amp;this.hour&lt;13)?this.hour+12:this.hour;if(this.day&gt;Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i&lt;x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&amp;&amp;this.hour){this.hour=(this.hour&lt;13&amp;&amp;this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&amp;&amp;!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&amp;&amp;!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i&lt;kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i&lt;fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};
</code>
    </property>
    <property>
      <name>date.js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8a00c0ff-1104-4d18-adfc-5ff84005f27b</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/* css for timepicker */
.ui-timepicker-div .ui-widget-header { 
margin-bottom: 8px;
 }

.ui-timepicker-div dl { text-align: left; }
.ui-timepicker-div dl dt { height: 25px; margin-bottom: -25px; }
.ui-timepicker-div dl dd { margin: 0 10px 10px 65px; }
.ui-timepicker-div td { font-size: 90%; }
.ui-tpicker-grid-label { background: none; border: none; margin: 0; padding: 0; }

.ui-timepicker-rtl{ direction: rtl; }
.ui-timepicker-rtl dl { text-align: right; }
.ui-timepicker-rtl dl dd { margin: 0 65px 10px 10px; }
#ui-datepicker-div{
 position:relative;
 width:auto;
 height:auto
}
</code>
    </property>
    <property>
      <name>datetimepicker -css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>7613b438-ae32-48c1-b42e-db3161cbe041</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>.displayblock {
  border:2px solid;
  -webkit-border-radius:6px;
  float: left;
}

.displaypie {
  border:1px solid;
  -webkit-border-radius:6px;
  background:gray;
  width: 48%;
  float: left; 
  height: 300px;
}

.subtype{
  margin-top: 50px;
  font-size: 2em;
  color: red;
}

.showHideLink a {
 background-color: #529549;
 cursor: pointer;
 text-decoration: none;
 color: #fff;
 font-size: 1em !important;
 font-weight: bold;
}
.chartDesc{
 margin: 20px;
 font-size: 1.5em;
 color: #2173af

 
}</code>
    </property>
    <property>
      <name>drawChart-css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>2</number>
    <className>XWiki.XWikiRights</className>
    <guid>8dc58f01-03a9-4f34-af69-60d448eee014</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>5</number>
    <className>XWiki.XWikiRights</className>
    <guid>09a5684f-cdd7-4181-96aa-4dda923a2e34</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>6</number>
    <className>XWiki.XWikiRights</className>
    <guid>ba3e19d9-17f7-4e60-9e86-f66a19cfe0ea</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>7</number>
    <className>XWiki.XWikiRights</className>
    <guid>49f1f4dd-05ca-4998-b214-593d28dc5a4f</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>8</number>
    <className>XWiki.XWikiRights</className>
    <guid>6d6f07e6-824f-4b07-bc8a-e83c5637c3bc</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>9</number>
    <className>XWiki.XWikiRights</className>
    <guid>1349e763-c1a9-4993-aa46-8f015275d72b</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>10</number>
    <className>XWiki.XWikiRights</className>
    <guid>f1f4d704-047e-4a94-9f51-bbd1bc1cbd7c</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>11</number>
    <className>XWiki.XWikiRights</className>
    <guid>79d8aed1-766d-4a00-824a-7612e42e2d00</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAdminGroup,</groups>
    </property>
    <property>
      <levels>view,edit,delete,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>13</number>
    <className>XWiki.XWikiRights</className>
    <guid>f374a06a-9de4-4ed9-baed-b59d1c2f32de</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>14</number>
    <className>XWiki.XWikiRights</className>
    <guid>8bd488d5-13dd-4342-9197-a87827e25dd4</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>xwiki:XWiki.XWikiAllGroup,</groups>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>15</number>
    <className>XWiki.XWikiRights</className>
    <guid>ad091d47-bac4-449b-b005-1918f937ce0b</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>view,comment,edit,delete</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>17</number>
    <className>XWiki.XWikiRights</className>
    <guid>803e3cab-44de-478a-9785-c59411495ce0</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>delete,edit</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDog.MonitoringData</name>
    <number>18</number>
    <className>XWiki.XWikiRights</className>
    <guid>7896bc4b-0918-481e-bbf0-73a1a02701cd</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>comment,view</levels>
    </property>
  </object>
  <content>{{include document="WiperDogLib.DataToDrawChart"/}}
{{include document="WiperDogLib.MongoDBConnection"/}}
{{velocity}}
$xwiki.jsx.use('WiperDogLib.JQueryUILib')
$xwiki.ssx.use('WiperDogLib.MenuGenerator')
$xwiki.jsx.use('WiperDogLib.MenuGenerator')
$xwiki.ssx.use('WiperDogLib.JQueryUILib')
$xwiki.jsx.use('WiperDogLib.JqGridLib')
$xwiki.ssx.use('WiperDogLib.JqGridLib')
$xwiki.jsx.use('WiperDogLib.ExportPDFLib')
$xwiki.jsx.use('WiperDogLib.jsPDF')
{{/velocity}}
{{html wiki="true" clean="false"}}
&lt;div &gt;&lt;span class = 'showHideLink'&gt;&lt;a id='toggleJobSelect' id = 'show'&gt;Hide job selection&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

{{/html}}
{{include document="WiperDogLib.MenuGenerator"/}}
{{html wiki="true" clean="false"}}
&lt;div id="viewer"&gt;
&lt;table style="text-align:left"  &gt;
 &lt;tr&gt;
  &lt;th &gt;Job name&lt;/th&gt;
  &lt;td colspan=3&gt;&lt;div id="jobname"&gt;&lt;/div&gt;&lt;/td&gt;
 &lt;/tr&gt;
{{groovy}}
import org.xwiki.context.*

def ec = services.component.getInstance(Execution.class).getContext()
def mapJobIstIid = ec.getProperty("mapJobIstIid")

// Form List Job, Job name, IstIid, Data monitor from, Data monitor to, Data records limit
println '{{html clean="false" wiki="false"}}'
println '&lt;tr&gt;'
println '&lt;th&gt;IstIid&lt;/th&gt;'
println '&lt;td colspan=3&gt;'
mapJobIstIid.each{jobEntry-&gt;
  def convertedJobKey = jobEntry.key.replaceAll("\\.","_")
  convertedJobKey = convertedJobKey.replaceAll("\\@","_")
  println "&lt;div id='listIstIid'&gt;"
  println "&lt;div id=IstIid${convertedJobKey} style='display:none'&gt;"
  println "&lt;select id=select_${convertedJobKey}&gt;"
  jobEntry.value.each{
     println "&lt;option value=\"$it\"&gt;$it&lt;/option&gt;"
  }
  println "&lt;/select&gt;"
  println "&lt;/div&gt;"
  println "&lt;/div&gt;"
}
println '&lt;/td&gt;'
println '&lt;/tr&gt;'
println '{{/html}}'
{{/groovy}}
	&lt;tr id="MonitoringDate"&gt;
		&lt;th&gt;Monitoring's time&lt;/th&gt;
		&lt;td colspan=3&gt;
			&lt;form&gt;
				&lt;input type="radio" id="Monitor1day" name="Monitor1day" value="1day"&gt;1 day&lt;/input&gt;
				&lt;input type="radio" id="Monitor3day" name="Monitor3day" value="3days"&gt;3 days&lt;/input&gt;
				&lt;input type="radio" id="Monitor7day" name="Monitor7day" value="7days"&gt;7 days&lt;/input&gt;
				&lt;input type="radio" id="MonitorOtherDay" name="MonitorOtherDay" value="other" checked="checked"&gt;Other&lt;/input&gt;
			&lt;/form&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr id="FromToArea"&gt;
		&lt;th&gt;Data monitor from&lt;/th&gt;
		&lt;td&gt;&lt;input type="text" name="from-date" id="from-date"/&gt;&lt;/td&gt;
		&lt;th&gt;Data monitor to&lt;/th&gt;
		&lt;td&gt;&lt;input type="text" name="to-date" id="to-date"/&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;th&gt;Data records limit &lt;/th&gt;
		&lt;td &gt;
			&lt;select id="limit"&gt;
				&lt;option value=10&gt;10&lt;/option&gt;
				&lt;option value=20&gt;20&lt;/option&gt;
				&lt;option value=50&gt;50&lt;/option&gt;
				&lt;option value=70&gt;70&lt;/option&gt;
				&lt;option value=100&gt;100&lt;/option&gt;
			&lt;/select&gt;
		&lt;/td&gt;
		&lt;td colspan=3 id="btnArea"&gt;
			&lt;input type="button" value="View Data" id="get-data" class="button"/&gt;
			&lt;input type="button" value="Export PDF" id="exportBtn" class="button"/&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style="display:none"&gt;
		&lt;td colspan=3&gt;&lt;div id="display"&gt;&lt;/div&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
{{/html}}

{{groovy}}
import groovy.json.*
xwiki.jsx.use("WiperDogLib.Highcharts")

if(request.xpage == "plain") {
  response.setContentType('text/plain')
}

def listData = []
//get job name from form html
def job = request.get("job")
//get from date of data monitoring from form html
def fromDate = request.get("fromDate")
//get to date of data monitoring from form html
def toDate = request.get("toDate")
//get limit of data monitoring from form html
def limit= (request.get("limit")!=null)?request.get("limit").toInteger():10
//get istIid of job respective from form html
def istIid = request.get("IstIid")

def str= "No data to retrieved !"
def result = null
if(job != "" &amp;&amp; job != null &amp;&amp; istIid != null &amp;&amp; istIid != ""){
  //open connection to mongoDB
  def mongoDBConn = new MongoDBConnection()
  //get data from mongoDB
  if(fromDate != "" || toDate != ""){
    result = mongoDBConn.getDataInPeriod(job,fromDate,toDate,limit,istIid)
  } else {
    result = mongoDBConn.getDataAllFields(job,limit,istIid)
  }
  //close connection to mongoDB
  mongoDBConn.closeConnection()
} else {
  println "{{warning}}There are no selected job or IstIid{{/warning}}"
}
def listKey = []
println '{{html clean="false" wiki="true"}}'
println "&lt;div id='resultData' style='display:none'&gt;" + com.mongodb.util.JSON.serialize(result) + "&lt;/div&gt;"
if( (result != null) &amp;&amp; (result.size() &gt; 0) &amp;&amp; (result[0].KEYEXPR != null)&amp;&amp;!(result[0].KEYEXPR instanceof List )){
  //Format data fetchAt
  result.each {item -&gt;
    def newdate = new Date().parse("yyyyMMddHHmmssz", item['fetchAt'])
    item['fetchAt'] = newdate.format('yyyy/MM/dd HH:mm:ss z')
  }

  	//Draw chart
	if(result[0].type == "Subtyped") {
		//set type for draw chart
		def typeChart = result[0].type
		//set data subtype for draw chart
	    def dataSubtype = DataToDrawChart.getDataToDrawSubtype(result)
	    //get list key of data subtyped
	    dataSubtype.each {key,value -&gt;
	      listKey.add(key)
	    }
	    //parse data of list key to json data
	    def jsonkey = com.mongodb.util.JSON.serialize(listKey)
	    println "&lt;textarea style=\"display:none\" id='lstkey' &gt;$jsonkey&lt;/textarea&gt;"
		println "&lt;div class = 'chart'&gt;"
		dataSubtype.each {key,value -&gt;
			//call function to draw chart
			drawChart(key, value, typeChart, fromDate, toDate)
			println "&lt;/div&gt;"
			println "&amp;nbsp;"
			/** Statistic data table **/
			println "&lt;div class = 'liveTableContainer' style = 'clear:both'&gt;&lt;span class = 'chartDesc'&gt;Statistics data for ${key}&amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='toggleLiveTableContainer' id = 'show'&gt;Hide data table  &lt;/a&gt;&lt;/span&gt;"
			println "&lt;div class = 'liveTable'&gt;"
			println "&lt;center&gt;"
			println "&lt;div class=\"livetblContentClass\" id='livetblContent_"+key+"' style='width:98%;clear:both;align:middle;margin-top:10px'&gt;"
			println "&lt;table id='livetableList_"+key+"' style='width:100%;align:center'&gt;&lt;/table&gt;"
			println "&lt;div id='livetablePager_"+key+"' style='position:relative;width:100%'&gt;&lt;/div&gt;"
			println "&lt;/div&gt;"
			println "&lt;/center&gt;"
			println "&lt;/div&gt;"
			println "&lt;/div&gt;"
		}
		println "&lt;div style='clear: both'&gt;&lt;/div&gt;"
	} else if(result[0].type == "Store") {
		//set type for draw chart
		def typeChart = result[0].type
		def key = ""
		println "&lt;div class = 'chart'&gt;"
		//call function to draw chart
		drawChart(key, result, typeChart, fromDate, toDate)
	}
  println "&lt;/div&gt;"
}else{
  println 'There is no data for this job with criterias'
}

/**
* draw chart with data respective
* @param key key of data subtyped
* @param value first data draw chart
* @param typeChart type of data draw chart
* @param fromDate start time to get data monitoring for draw chart
* @param toDate end time to get data monitoring for draw chart
*/
def drawChart(key,value,typeChart,fromDate,toDate) {
	def dataLine = getDataJson(value,"line")
	def dataBar = getDataJson(value,"bar")
	def dataPie = getDataJson(value,"pie")
	def dataArea = getDataJson(value,"area")
	
	def chartColumnsLine = getChartColumns(dataLine,"line")
	def chartColumnsBar = getChartColumns(dataBar,"bar")
	def chartColumnsArea = getChartColumns(dataArea,"area")
	def lstName
	
	//get list name of data pie
	if(dataPie.size() &gt; 0 ){
		lstName = dataPie['name']
	}
	//convert name of list name of data pie to format number_name
	def tmpListNameContainer = []
	if(lstName != null) {
		def chartNumPie = 0
		def tmpLst
		//for each data of list name
		for(def nameContainer in lstName){
			tmpLst = []
			for(def nameContainerItem in nameContainer ){
				nameContainerItem = chartNumPie + "_" + nameContainerItem.replaceAll("\\.", "_")
                if(typeChart == "Store") {
                     //add to list name container of data Store
				     tmpListNameContainer.add(nameContainerItem)
				} else if(typeChart == "Subtyped") {
				     tmpLst.add(nameContainerItem )
				}
			}
			//add to list name container of data Subtyped
            if(typeChart == "Subtyped") {
			    tmpListNameContainer.add(tmpLst)
                chartNumPie++
            }
		}
	}
	//get data json of pie
	def jsonPie = parseJson(dataPie)
	//get data json of line
	def jsonLine = parseJson(dataLine)
	//get data json of bar
	def jsonBar = parseJson(dataBar)
	//get data json of area
	def jsonArea = parseJson(dataArea)
	//get data json of container pie
	def jsonContainerPie = parseJson(tmpListNameContainer)
	
	//get data json of chartColumns
	def jsonContainerLine = parseJson(chartColumnsLine)
	def jsonContainerBar = parseJson(chartColumnsBar)
	def jsonContainerArea = parseJson(chartColumnsArea)
	//Prepare data, list container for draw chart and tags of hidden chart
	prepareDataAndListContainer(value, typeChart, jsonPie, jsonLine, jsonBar, jsonArea, jsonContainerPie, jsonContainerLine, jsonContainerBar, jsonContainerArea, key)
	//get time of data monitoring for draw chart
	def fromDateFinal = (!"".equals(fromDate))? ("from: " + fromDate) : ""
	def toDateFinal = (!"".equals(toDate))? (" to: " + toDate) : " to system time."
	
	prepareContainerPie(jsonPie, lstName, typeChart, key)
	prepareContainerLine(jsonLine, chartColumnsLine, fromDateFinal, toDateFinal, key)
	prepareContainerBar(jsonBar, chartColumnsBar, fromDateFinal, toDateFinal, typeChart, key)
	prepareContainerArea(jsonArea, chartColumnsArea, fromDateFinal, toDateFinal, typeChart, key)
}
/**
* Get list chart columns
* @param data data draw chart
* @param typeChart type of data draw chart
* @return chartColumns list data of chart columns
*/
def getChartColumns(data,typeChart) {
	def chartColumns = []
	data.each {itemData -&gt;
		if(itemData.size() &gt; 0){
			if(typeChart == "line") {
				//get chart columns of data line
				itemData.each{item-&gt;
					chartColumns.add(item.chart_name)
				} 
			} else if(typeChart == "bar"){
				//get chart columns of data bar
				chartColumns.add(itemData[0].chart_columns)
			} else if(typeChart == "area") {
				//get chart columns of data area
				chartColumns.add(itemData[0].chartItemName)
			}
		}
	}
	return chartColumns
}

/**
* Get data to draw chart
* @param value first data draw chart
* @param type type of chart
* @return data data after convert to draw chart
*/
def getDataJson(value,type) {
	def data = []
	if(type == "line" &amp;&amp; DataToDrawChart.getDataToDrawLine(value) != []) {
		//get data draw line
		data = DataToDrawChart.getDataToDrawLine(value)
	} else if(type == "bar" &amp;&amp; DataToDrawChart.getDataToDrawBar(value) != []) {
		//get data to draw bar
		data = DataToDrawChart.getDataToDrawBar(value)
	} else if(type == "pie" &amp;&amp; DataToDrawChart.getDataToDrawPie(value) != []) {
		//get data to draw pie
		data = DataToDrawChart.getDataToDrawPie(value)
	} else if(type == "area" &amp;&amp; DataToDrawChart.getDataToDrawArea(value) != []) {
		//get data to draw area
		data = DataToDrawChart.getDataToDrawArea(value)
	}
	return data
}

/**
* Convert data to json
* @param data data need to convert
* @return json data after convert to json
*/
def parseJson(data) {
	def json
	if(data != []) {
		//convert data to json
		json = com.mongodb.util.JSON.serialize(data)
                json = json.replace('\\', "_")
	}
	return json
}

/**
* Prepare data, list container for draw chart and tags of hidden chart
* @param value first data draw chart
* @param typeChart type of data draw chart
* @param jsonPie data json for pie chart
* @param jsonLine data json for line chart
* @param jsonBar data json for bar chart
* @param jsonArea data json for area chart
* @param jsonContainerPie data json for container of pie chart
* @param jsonContainerLine data json for container of line chart
* @param jsonContainerBar data json for container of bar chart
* @param jsonContainerArea data json for container of area chart
* @param key key of data subtyped
*/
def prepareDataAndListContainer(value, typeChart, jsonPie, jsonLine, jsonBar, jsonArea, jsonContainerPie, jsonContainerLine, jsonContainerBar, jsonContainerArea, key) {
	//create string to show/hide html
	def strShowHideHtml = ""
	if(typeChart == "Store"){
		//data Store
		//set value [] to list key for check data Subtype or Store
		def listEmpty = com.mongodb.util.JSON.serialize([])
		println "&lt;textarea style=\"display:none\" id='lstkey' &gt;$listEmpty&lt;/textarea&gt;"
		//Create textarea and container for draw chart
		println "&lt;div id='jsons' style = \"display:none\"&gt;"
		println "&lt;textarea class='jsonline' &gt;$jsonLine &lt;/textarea&gt;"
		println "&lt;textarea class='jsonbar' &gt;$jsonBar &lt;/textarea&gt;"
		println "&lt;textarea class='jsonpie' &gt;$jsonPie &lt;/textarea&gt;"
		println "&lt;textarea class='jsonarea' &gt;$jsonArea &lt;/textarea&gt;"

		println "&lt;textarea class='lstcontainerpie' &gt;$jsonContainerPie &lt;/textarea&gt;"
		println "&lt;textarea class='lstcontainerline' &gt;$jsonContainerLine &lt;/textarea&gt;"
		println "&lt;textarea class='lstcontainerbar' &gt;$jsonContainerBar &lt;/textarea&gt;"
		println "&lt;textarea class='lstcontainerarea' &gt;$jsonContainerArea &lt;/textarea&gt;"
		println "&lt;/div&gt;"
	} else if(typeChart == "Subtyped") {
		//data Subtyped
		println "&lt;div id='jsons' style = \"display:none\"&gt;"
		def checkChartAvailable = false
		//Create textarea and container for draw chart of data line
		if(jsonLine != null) {
			println "&lt;textarea id=\"jsonline_$key\" &gt;$jsonLine &lt;/textarea&gt;"
			println "&lt;textarea class=\"lstcontainerline_$key\" &gt;$jsonContainerLine &lt;/textarea&gt;"
			checkChartAvailable = true
		}
		//Create textarea and container for draw chart of data bar
		if(jsonBar != null) {
			println "&lt;textarea id=\"jsonbar_$key\"&gt;$jsonBar &lt;/textarea&gt;"
			println "&lt;textarea class='lstcontainerbar_$key' &gt;$jsonContainerBar &lt;/textarea&gt;"
		}
		//Create textarea and container for draw chart of data pie
		if(jsonPie != null &amp;&amp; jsonContainerPie != null) {
			println "&lt;textarea id=\"jsonpie_$key\" &gt;$jsonPie &lt;/textarea&gt;"
			println "&lt;textarea class='lstcontainerpie_$key' &gt;$jsonContainerPie &lt;/textarea&gt;"
			checkChartAvailable = true
		}
		//Create textarea and container for draw chart of data area
		if(jsonArea != null) {
			println "&lt;textarea id=\"jsonarea_$key\" &gt;$jsonArea &lt;/textarea&gt;"
			println "&lt;textarea class='lstcontainerarea_$key' &gt;$jsonContainerArea &lt;/textarea&gt;"
			checkChartAvailable = true
		}
		//set string when no chart avaiable
		strShowHideHtml = "{{warning}}No chart avaiable !{{/warning}}"
		//show hide link if chart avaiable
		if(checkChartAvailable){
			strShowHideHtml = "&lt;span class = 'showHideLink'&gt;&lt;a class='allChart' id = 'show'&gt;Hide all charts  &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;"
		}
		println "&lt;/div&gt;"
	}
	println "&lt;div style='clear:both'&gt;"
	if(typeChart == "Store") {
		//set link for hide/show all chart
		println "&lt;div id = 'chartContainer'  style = 'clear:both' class = 'store'&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='allChart' id = 'show'&gt;Hide all charts  &lt;/a&gt;&lt;/span&gt;"
		println "---------------------"
		println "&amp;nbsp;"
	} else if(typeChart == "Subtyped") {
		//get description
		def description = value.KEYEXPR._description[0][key]
		println "&lt;div id = 'chartContainer'  style = 'clear:both' &gt;"
		println "&amp;nbsp;"
		//set header of chart and link for hide/show all chart
		if(description != null) {
			println "&lt;div &gt;&lt;span class=\"subtype\"&gt;Chart Of "+ key +" : " + description +"&amp;nbsp;&lt;/span&gt; " + strShowHideHtml
		} else {
			println "&lt;div &gt;&lt;span class=\"subtype\"&gt;Chart Of "+ key + "&amp;nbsp;&lt;/span&gt;" + strShowHideHtml
		}
		println "-----"
	}
}

/**
* Prepare container for draw chart of data Pie
* @param jsonPie data json for pie chart
* @param lstName list name for pie chart
* @param typeChart type of data draw chart
* @param key key of data subtyped
*/
def prepareContainerPie(jsonPie, lstName, typeChart, key) {
	if(jsonPie != null) {
		//set link for hide/show chart of data pie
		println "&lt;div id = 'pieChart' style = 'clear:both'&gt;&lt;span class = 'chartDesc'&gt;Pie chart : This chart is lastest monitoring data &amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='togglePie' id = 'show'&gt;Hide pie charts  &lt;/a&gt;&lt;/span&gt;"
		println "&amp;nbsp;"
		println "&lt;div id=\"wrapperPieChart\" style=\"clear:both\"&gt;"
		def chartPieComment = false
		chartNumPie = 0
		//for each data of list name
		lstName.each{chartPieLst-&gt;
			chartPieLst.each {
				def tmp
				//set container used to display chart of data pie
				if(typeChart == "Subtyped") {
					tmp = chartNumPie + "_" + it.replaceAll("\\.", "_")
					println " &lt;div class=\"displaypie\" id=\"container${key}_${tmp}\" &gt;&lt;/div&gt;"
				} else if(typeChart == "Store") {
					tmp = chartNumPie + "_pie"
					println " &lt;div class=\"displaypie\" id=\"container$tmp\" &gt;&lt;/div&gt;"
					chartNumPie++
				}
			}
			if(typeChart == "Subtyped") {
				chartNumPie++
			}
		}
		println "&lt;/div&gt;"
		println "&lt;/div&gt;"
	}
	println "&lt;div style = 'clear: both'&gt;&amp;nbsp;&lt;/div&gt;"
}

/**
* Prepare container for draw chart of data Line
* @param jsonLine data json for line chart
* @param chartColumnsLine list chart columns for line chart
* @param fromDateFinal start time to get data monitoring for draw chart
* @param toDateFinal end time to get data monitoring for draw chart
* @param typeChart type of data draw chart
* @param key key of data subtyped
*/
def prepareContainerLine(jsonLine, chartColumnsLine, fromDateFinal, toDateFinal, key) {
	if(jsonLine != null) {
		def chartLineComment = false
		def chartNumLine = 0
		//for each data of list chart columns
		chartColumnsLine.each{chartColumnsLineItem -&gt;
			//show information of chart
			if(!chartLineComment){
				println "&lt;div id = 'lineChart' style = 'clear:both' &gt;&lt;span class = 'chartDesc'&gt;Line chart : This chart is monitoring data " +fromDateFinal + toDateFinal +"&amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='toggleLine' id = 'show'&gt;Hide Line charts  &lt;/a&gt;&lt;/span&gt;"
				println "&amp;nbsp;"
				println "&lt;div id=\"wrapperLineChart\" style=\" clear:both\"&gt;"
				chartLineComment = true
			}
			//set container used to display chart of data line
			println " &lt;div class=\"displayBlockLine\" id=\"containerline${key}_${chartColumnsLineItem}\"&gt;&lt;/div&gt;"
		}
		if(chartLineComment){
			println "&lt;/div&gt;"
			println "&lt;/div&gt;"
		}
	}
	println "&amp;nbsp;"
}

/**
* Prepare container for draw chart of data Bar
* @param jsonBar data json for bar chart
* @param chartColumnsBar list chart columns for bar chart
* @param fromDateFinal start time to get data monitoring for draw chart
* @param toDateFinal end time to get data monitoring for draw chart
* @param typeChart type of data draw chart
* @param key key of data subtyped
*/
def prepareContainerBar(jsonBar, chartColumnsBar, fromDateFinal, toDateFinal, typeChart, key) {
	if(jsonBar != null) {
		def chartBarComment = false
		def chartNumBar = 0
		//for each data of list chart columns
		chartColumnsBar.each{chartColumnsBarItem -&gt;
			//show information of chart
			if(!chartBarComment){
				println "&lt;div id = 'barChart'  style = 'clear:both'&gt;&lt;span class = 'chartDesc'&gt;Bar chart : This chart is monitoring data " + fromDateFinal + toDateFinal + "&amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='toggleBar' id = 'show'&gt;Hide bar charts  &lt;/a&gt;&lt;/span&gt;"
				println "&amp;nbsp;"
				println "&lt;div id=\"wrapperBarChart\" style=\"clear:both\"&gt;"
				chartBarComment = true
			}
			//set container used to display chart of data bar
			if(typeChart == "Subtyped") {
				chartColumnsBarItem.each{ println " &lt;div class=\"displayBlockBar\" id=\"containerbar${key}_${chartNumBar}_${it}\"&gt;&lt;/div&gt;" }
			} else if (typeChart == "Store") {
				chartColumnsBarItem.each{ println " &lt;div class=\"displayBlockBar\" id=\"containerbar${chartNumBar}_${it}\"&gt;&lt;/div&gt;" }
			}
			chartNumBar++
		}
		if(chartBarComment){
			println "&lt;/div&gt;"
			println "&lt;/div&gt;"
		}
	}
	println "&amp;nbsp;"
}

/**
* Prepare container for draw chart of data Area
* @param jsonArea data json for area chart
* @param chartColumnsArea list chart columns for area chart
* @param fromDateFinal start time to get data monitoring for draw chart
* @param toDateFinal end time to get data monitoring for draw chart
* @param typeChart type of data draw chart
* @param key key of data subtyped
*/
def prepareContainerArea(jsonArea, chartColumnsArea, fromDateFinal, toDateFinal, typeChart, key) {
	if(jsonArea != null) {
		def chartAreaComment = false
		def chartNumArea = 0
		//for each data of list chart columns
		chartColumnsArea.each{chartColumnsAreaItem -&gt;
			//show information of chart
			if(!chartAreaComment){
		        println "&lt;div id = 'areaChart'  style = 'clear:both'&gt;&lt;span class = 'chartDesc'&gt;Area chart : This chart is monitoring data " + fromDateFinal + toDateFinal + "&amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='toggleArea' id = 'show'&gt;Hide area charts  &lt;/a&gt;&lt;/span&gt;"
		        println "&amp;nbsp;"
				println "&lt;div id=\"wrapperAreaChart\" style=\"clear:both\"&gt;"
				chartAreaComment = true
			}
			//set container used to display chart of data area
			if(typeChart == "Subtyped") {
				chartColumnsAreaItem.each{ println " &lt;div class=\"displayBlockArea\" id=\"containerarea${key}_${chartNumArea}_${it}\"&gt;&lt;/div&gt;" }
			} else if (typeChart == "Store") {
				chartColumnsAreaItem.each{ println " &lt;div class=\"displayBlockArea\" id=\"containerarea${chartNumArea}_${it}\"&gt;&lt;/div&gt;" }
			}
			chartNumArea++
		}
		if(chartAreaComment){
			println "&lt;/div&gt;"
			println "&lt;/div&gt;"
		}
	}
}

def subTypeURLMap = [:]
//build for livetable
result.find{rec-&gt;
	def subtractData = []
	//-- Parsing data and assign data to subtract list
	if(rec.type == "Store"){ //-- Store data type
		subtractData = rec['data']
		def key = ""
		println "&lt;div id='livetableJson' style = \"display:none\"&gt;"
		//show live table of data Store
		println liveTable(subtractData, rec.type, job, limit, istIid, fromDate, toDate, key)
		println "&lt;/div&gt;"
	}else{ //-- Subtype
		def subData = rec['data']
		//for each data of data subtyped
		subData.each{key,value-&gt;
			subtractData = value
			//set data live table for each key of data subtyped
			subTypeURLMap[key] = liveTable(subtractData, rec.type, job, limit, istIid, fromDate, toDate, key)
		}
		def finalStr = (new JsonBuilder(subTypeURLMap)).toPrettyString()
	    println "&lt;div id='livetableJson' style = \"display:none\"&gt;"
	    //show live table of data Subtyped
		println finalStr
		println "&lt;/div&gt;"
	}
	return true
}

/**
* create livetable of data draw chart
* @param data data of all chart
* @param type type of data draw chart
* @param job job's name
* @param limit limit of data montoring
* @param istIid instance of job
* @param fromDate start time to get data monitoring for draw chart
* @param toDate end time to get data monitoring for draw chart
* @param key key of data subtyped
* @return str live table of data chart
*/
def liveTable(data,type,job,limit,istIid,fromDate,toDate,key){
	def dataModel = []
	def dataUrl = ""
	data.each{r2-&gt;
      if(dataModel != null &amp;&amp; dataModel.size() &lt;=0){
        dataModel.add("Fetch At")
        dataModel.addAll(r2.keySet());
      }
    }
    if(type == "Store") {
    	dataUrl = "/xwiki/bin/get/WiperDogLib/LivetableDataAdapter?outputSyntax=plain&amp;job="+job +"&amp;limit="+limit+"&amp;fromDate="+fromDate + "&amp;toDate=" + toDate + "&amp;istIid="+istIid
    } else if (type == "Subtyped") {
    	dataUrl = "/xwiki/bin/get/WiperDogLib/LivetableDataAdapter?outputSyntax=plain&amp;job="+job +"&amp;limit="+limit+"&amp;fromDate="+fromDate + "&amp;toDate=" + toDate + "&amp;istIid="+istIid+"&amp;subType="+key
	}
    //-- Building data model
    def model = []
    def colSpec
    dataModel.each{name-&gt;
      colSpec = [:]
      colSpec['name'] = name
      colSpec['index'] = name
      colSpec['width'] = "100"
      model.add(colSpec)
    }
    def dataModelStr = (new JsonBuilder(dataModel)).toPrettyString()
    def modelStr = (new JsonBuilder(model)).toPrettyString()
    str =
        "{\"url\":\""+dataUrl+"\",\"datatype\":\"json\","+
        "\"colNames\":"+ dataModelStr +
        ",\"colModel\":"+ modelStr +" ,\"rowList\":[10,20,30],"+
        "\"pager\":\"#livetablePager\", \"viewrecords\": true, \"caption\":\""+job+"\", \"loadonce\": true}"
    return str
}

if(listKey.size() &lt;= 0 &amp;&amp; (result != null) &amp;&amp; (result.size() &gt; 0) ){
  println "&lt;div class = 'liveTableContainer' style = 'clear:both'&gt;&lt;span class = 'chartDesc'&gt;Statistics data &amp;nbsp;&lt;/span&gt;&lt;span class = 'showHideLink'&gt;&lt;a class='toggleLiveTableContainer' id = 'show'&gt;Hide data table  &lt;/a&gt;&lt;/span&gt;"
  println "&lt;div class = 'liveTable'&gt;"
  println "&lt;center&gt;"
  println "&lt;div class=\"livetblContentClass\" id=\"livetblContent\" style=\"width:98%;clear:both;align:middle;margin-top:10px;\"&gt;"
  println "&lt;table id=\"livetableList\" style=\"width:100%;align:center\"&gt;&lt;/table&gt;"
  println "&lt;div id=\"livetablePager\" style=\"width:100%;align:center\"&gt;&lt;/div&gt;"
  println "&lt;/div&gt;"
  println "&lt;/center&gt;"
  println "&lt;/div&gt;"
  println "&lt;/div&gt;"
}

println "{{/html}}"
{{/groovy}}</content>
</xwikidoc>
