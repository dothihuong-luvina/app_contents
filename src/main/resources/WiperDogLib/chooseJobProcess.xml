<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>WiperDogLib</web>
<name>chooseJobProcess</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>WiperDogLib.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1380879465000</creationDate>
<date>1381218372000</date>
<contentUpdateDate>1381218372000</contentUpdateDate>
<version>2.13</version>
<title>chooseJobProcess</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{include document="WiperDogLib.MongoDBConnection"/}}
{{groovy}}import com.gmongo.GMongo
import java.text.SimpleDateFormat
import groovy.json.*
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.regex.Matcher
import java.util.regex.Pattern
import groovy.lang.GroovyShell

def gmongoObject = MongoDBConnection.getConnection()
def dbConn = gmongoObject.getDB('wiperdog')
def lstJobMongo = dbConn.getCollectionNames()
def slurper = new JsonSlurper()
def builder
 
response.setContentType('text')

def jobName = request.getParameter("jobName")
if(jobName == null || jobName == "") {
    def mapNameAndType = [:]
    def type
    lstJobMongo.each {eCollec -&gt;
        type = MongoDBConnection.getDataType(eCollec)
        mapNameAndType[eCollec] = type
    }
    builder = new JsonBuilder(mapNameAndType)
    println builder.toString()
} else {
    def mapFinalPolicy = [:]
    lstJobMongo.find {eCollection -&gt;
        if(eCollection == jobName || eCollection.contains(jobName)) {
            // Sample Data
            def mapSampleData = [:]
            def mapSampleUnit = [:]
            def resultJob = MongoDBConnection.getDataAllFields(eCollection)[0]
            def mapUnit = resultJob.KEYEXPR._unit
            if(resultJob.type == "Store") {
                def cloneSampleData = [:]
                mapSampleData = resultJob.data[0]
                mapSampleData.each {key,value -&gt;
                    if(value.toString().contains("\\")){
                        value = value.replaceAll("\\\\","/")
                    }
                    cloneSampleData[key] = value
                    def checkExits = false
                    mapUnit.each {keyUnit, valueUnit -&gt;
                        if(key == keyUnit) {
                            checkExits = true
                            def keyResp = key + " (" + valueUnit + ")"
                            mapSampleUnit[key] = valueUnit
                        }
                    }
                    if(!checkExits) {
                        mapSampleUnit[key] = ""
                    }
                }
                mapFinalPolicy["SAMPLE"] = cloneSampleData
                mapFinalPolicy["UNIT"] = mapSampleUnit
                mapFinalPolicy["TYPE"] = resultJob.type
            } else if(resultJob.type == "Subtyped") {
                def lstKey = resultJob.data.keySet()
                lstKey.each {eKey -&gt;
                    def tmpMapUnit = [:]
                    mapSampleData[eKey] = resultJob.data[eKey][0]
                    resultJob.data[eKey][0].each {key, value -&gt;
                        def checkExits = false
                        mapUnit.each {keyUnit, valueUnit -&gt;
                            if(key == keyUnit) {
                                checkExits = true
                                def keyResp = key + " (" + valueUnit + ")"
                                tmpMapUnit[key] = valueUnit
                            }                            
                        }
                        if(!checkExits) {
                            tmpMapUnit[key] = ""
                        }
                    }
                    mapSampleUnit[eKey] = tmpMapUnit
                }
                mapFinalPolicy["SAMPLE"] = mapSampleData
                mapFinalPolicy["UNIT"] = mapSampleUnit
                mapFinalPolicy["TYPE"] = resultJob.type
                //mapSampleData = resultJob.data[resultJob.data.keySet()[0]][0]
            }
        }
    }
    builder = new JsonBuilder(mapFinalPolicy)
    println builder.toString()    
}
gmongoObject.close(){{/groovy}}</content></xwikidoc>
